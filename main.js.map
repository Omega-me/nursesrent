{"version":3,"file":"main.js","mappings":"uIACA,kBAGA,eACA,cACA,YACA,qBACA,WACA,8BACA,iBACA,0BACA,cAGA,6DACA,2CACA,4DACA,+DAGA,0DAGMA,EAAMC,IACNC,GAAmC,aAAU,CACjDC,IAAK,IACLC,SAAU,KACVC,QAAS,gEAIXL,EAAIM,KAAI,gBACR,gBAAyBC,EAAMC,IAAIC,KAAOT,EAAIM,IAAII,EAAO,QACzDV,EAAIM,IAAI,UAAWL,EAAQU,OAAOC,EAAKC,KAAKC,UAAW,YAGvDd,EAAIM,IAAIS,EAAK,CAAEC,QAAQ,EAAMC,aAAa,KAC1CjB,EAAIM,IAAI,GAAGC,EAAMW,YAAahB,GAC9BF,EAAIM,IAAIL,EAAQkB,QAChBnB,EAAIM,IAAIc,KACRpB,EAAIM,IAAIe,KACRrB,EAAIM,IAAIgB,KACRtB,EAAIM,IAAIiB,KAGRvB,EAAIwB,IAAI,KAAK,CAACC,EAAKC,KACjBA,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QAAS,8BACT,IAEJL,EAAIwB,IAAI,EAAAQ,WAAWC,MAAM,CAACR,EAAKC,KAC7BA,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQ,UACRO,KAAM,8BACN,IAEJlC,EAAIM,IAAI,GAAG,EAAA0B,WAAWC,QAAQ,EAAAD,WAAWG,aAAc,EAAAC,gBACvDpC,EAAIM,IAAI,GAAG,EAAA0B,WAAWC,QAAQ,EAAAD,WAAWK,OAAQ,EAAAC,YACjDtC,EAAIM,IAAI,GAAG,EAAA0B,WAAWC,QAAQ,EAAAD,WAAWO,QAAS,EAAAC,aAElDxC,EAAIyC,IAAI,KAAK,CAAChB,EAAKC,EAAKgB,KACtBA,EACE,IAAI,EAAAC,SACF,cAAclB,EAAImB,8BAClB,EAAAhB,YAAYiB,WAEf,IAGH7C,EAAIM,IAAI,EAAAwC,oBAER,UAAe9C,C,oICxEf,qEACA,kEAEM+C,EAAS,EAAAC,eAAeC,UAAwC,WAChEC,EAAS,EAAAF,eAAeE,OAAqC,WAC7DC,EAAS,EAAAH,eAAeG,OAAmB,WAC3CC,EAAY,EAAAJ,eAAeI,UAC/B,WAEIC,EAAY,EAAAL,eAAeK,UAA4B,WAE7D,UAAe,CACbH,SACAH,SACAI,SACAC,YACAC,Y,gKCjBF,iDACA,yDACA,yDAyFa,EAAAP,mBAAqB,CAChCQ,EACA7B,EACAC,EAEAgB,KAKA,GAHAY,EAAIC,WAAaD,EAAIC,YAAc,EAAA3B,YAAY4B,sBAC/CF,EAAI3B,OAAS2B,EAAI3B,QAAUpB,EAAMuB,OAAO2B,MAEpC,gBAAyBlD,EAAMC,IAAIC,IAlEpB,EAAC6C,EAAU7B,EAAUC,KACxC,MAAMgC,EAAQ,IAAI,EAAAf,SAASW,EAAIjD,QAASiD,EAAIC,YAExC9B,EAAImB,YAAYe,WAAW,QACtBjC,EAAIC,OAAO2B,EAAIC,YAAYpC,KAAK,CACrCQ,OAAQ+B,EAAM/B,OACd+B,QACAH,WAAYD,EAAIC,WAChBlD,QAASqD,EAAMrD,QACfuD,MAAOF,EAAME,SAKjBC,QAAQH,MAAM,qBAAYJ,GACnB5B,EAAIC,OAAO2B,EAAIC,YAAYO,OAAO,QAAS,CAChDC,MAAO,6BACPR,WAAYD,EAAIC,WAChBS,IAAKV,EAAIjD,UACT,EAgDA4D,CAAaX,EAAK7B,EAAKC,QAClB,GAAI,gBAAyBnB,EAAMC,IAAI0D,KAAM,CAClD,IAAIR,EAAQ,OAAH,UAAQJ,GACjBI,EAAMrD,QAAUiD,EAAIjD,QACpBqD,EAAMS,KAAOb,EAAIa,KACbT,EAAMS,OAAS5D,EAAM6D,WAAWC,YAClCX,EAvGoB,CAACJ,IACzB,MAAMjD,EAAU,WAAWiD,EAAI1C,SAAS0C,EAAIgB,SAC5C,OAAO,IAAI,EAAA3B,SAAStC,EAAS,EAAAuB,YAAY2C,YAAY,EAqGzCC,CAAkBd,IACxBA,EAAMe,OAASlE,EAAM6D,WAAWM,sBAClChB,EApG0B,CAACJ,IAC/B,MAEMjD,EAAU,0BAFFiD,EAAIjD,QAAQsE,MAAM,oBAAoB,gCAGpD,OAAO,IAAI,EAAAhC,SAAStC,EAAS,EAAAuB,YAAYgD,SAAS,EAgGtCC,CAAwBnB,IAC9BA,EAAMS,OAAS5D,EAAM6D,WAAWU,kBAClCpB,EA/F0B,CAACJ,IAG/B,MAEMjD,EAAU,uBAFD0E,OAAOC,OAAO1B,EAAI2B,QAAQC,KAAKC,GAAYA,EAAG9E,UAEfQ,KAAK,QACnD,OAAO,IAAI,EAAA8B,SAAStC,EAAS,EAAAuB,YAAYgD,SAAS,EAyFtCQ,CAAwB1B,IAC9BA,EAAMS,OAAS5D,EAAM6D,WAAWiB,oBAClC3B,EAvFJ,IAAI,EAAAf,SAAS,sCAAuC,EAAAf,YAAY0D,eAwF1D5B,EAAMS,OAAS5D,EAAM6D,WAAWmB,oBAClC7B,EAtFJ,IAAI,EAAAf,SACF,+CACA,EAAAf,YAAY0D,eAyBM,EAAChC,EAAU7B,EAAUC,KAErCD,EAAImB,YAAYe,WAAW,QAEzBL,EAAIkC,cACC9D,EAAIC,OAAO2B,EAAIC,YAAYpC,KAAK,CACrCQ,OAAQ2B,EAAI3B,OACZ4B,WAAYD,EAAIC,WAChBlD,QAASiD,EAAIjD,WAKjBwD,QAAQH,MAAM,qBAAYJ,GAEnB5B,EAAIC,OAAO,EAAAC,YAAY4B,uBAAuBrC,KAAK,CACxDQ,OAAQ,QACR4B,WAAY,EAAA3B,YAAY4B,sBACxBnD,QAAS,iCAMbwD,QAAQH,MAAM,qBAAYJ,GAEnB5B,EAAIC,OAAO2B,EAAIC,YAAYO,OAAO,QAAS,CAChDC,MAAO,6BACPR,WAAYD,EAAIC,WAChBS,IAAK,4BACL,EA+BAyB,CAAc/B,EAAOjC,EAAKC,E,qJCpH9B,2CAEA,yDACA,yDACA,yDAgHMsB,EAAiB,CACrBE,OAlBkCwC,IAClC,IAAAC,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAClC,MAAMkD,EAAW,IAAI,EAAAC,YAAYH,EAAMI,OAAQrE,EAAIsE,OAChDC,SACAC,OACAC,cACAC,WACGC,QAAmBR,EAASG,MAGlCrE,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrBsE,QAASD,EAAIE,OACbpE,KAAMkE,GAEV,MAIAjD,OA3Ca,CAAYuC,EAAmBa,KAC5C,IAAAZ,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAClC,MAAM,GAAE8D,GAAO/E,EAAIgF,QACnB,IAAAC,SAAQF,EAAI9D,GAEZ,IAAIqD,EAAQL,EAAMiB,SAASH,GACvBD,IAAYR,EAAQA,EAAMa,SAASL,IACvC,MAAMH,QAAiBL,EAEvB,IAAKK,EACH,OAAO1D,EAAK,IAAI,EAAAC,SAASkE,EAAOC,aAAc,EAAAlF,YAAYiB,YAG5DnB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrBG,KAAMkE,GAEV,MA2BAnD,UA7DqCyC,IACrC,IAAAC,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAClC,MAAM0D,QAAaV,EAAM3C,OAAOtB,EAAIsF,MAEpCrF,EAAIC,OAAO,EAAAC,YAAYoF,SAAS7F,KAAK,CACnCQ,OAAQpB,EAAMuB,OAAOC,QACrBG,KAAMkE,GAEV,MAsDAhD,UAvFqCsC,IACrC,IAAAC,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAClC,MAAM,GAAE8D,GAAO/E,EAAIgF,QACnB,IAAAC,SAAQF,EAAI9D,GAEZ,MAAM0D,QAAiBV,EAAMuB,kBAAkBT,EAAI/E,EAAIsF,KAAM,CAC3DG,KAAK,EACLC,eAAe,IAGjB,IAAKf,EACH,OAAO1D,EAAK,IAAI,EAAAC,SAASkE,EAAOC,aAAc,EAAAlF,YAAYiB,YAG5DnB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrBG,KAAMkE,GAEV,MAsEA/C,UA9G0BqC,IAC1B,IAAAC,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAClC,MAAM,GAAE8D,GAAO/E,EAAIgF,QACnB,IAAAC,SAAQF,EAAI9D,GAIZ,WAFkBgD,EAAM0B,kBAAkBZ,IAGxC,OAAO9D,EAAK,IAAI,EAAAC,SAASkE,EAAOC,aAAc,EAAAlF,YAAYiB,YAG5DnB,EAAIC,OAAO,EAAAC,YAAYyF,YAAYlG,KAAK,CACtCQ,OAAQpB,EAAMuB,OAAOC,QACrBG,KAAM,MAEV,OAkGF,UAAec,C,iIC7Hf,qEACA,+DAEMD,EAAS,EAAAC,eAAeC,UAAkC,WAC1DC,EAAS,EAAAF,eAAeE,OAA+B,WACvDC,EAAS,EAAAH,eAAeG,OAAgB,WACxCC,EAAY,EAAAJ,eAAeI,UAAkC,WAC7DC,EAAY,EAAAL,eAAeK,UAAyB,WAE1D,UAAe,CACbH,SACAH,SACAI,SACAC,YACAC,Y,wICdF,qEACA,sEAEMN,EAAS,EAAAC,eAAeC,UAC5B,WAEIC,EAAS,EAAAF,eAAeE,OAC5B,WAEIC,EAAS,EAAAH,eAAeG,OAAuB,WAC/CC,EAAY,EAAAJ,eAAeI,UAG/B,WACIC,EAAY,EAAAL,eAAeK,UAAgC,WAEjE,UAAe,CACbH,SACAH,SACAI,SACAC,YACAC,Y,0KCpBF,2CACA,YACA,0DACA,oBACA,yDAQA,yDAEMiE,GAAS,IAAA3B,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,UACJ6E,EAAS,SACTC,EAAQ,MACRC,EAAK,MACLC,EAAK,SACLC,EAAQ,gBACRC,EAAe,SACfC,EAAQ,eACRC,EAAc,MACdC,GACEtG,EAAIsF,KAEFiB,EAA0B,CAC9BT,YACAC,WACAC,QACAC,QACAC,WACAC,kBACAC,WACAC,iBACAC,SAGIE,EAAc,IAAI,EAAAC,KAAKF,GAG7B,SAFmBC,EAAYE,OAErB,CAER,MAAMC,QAAkB,IAAI,EAAAC,MAC1BL,GACA,IAAAM,aAAY7G,GAAK8G,aACjB,kEACA7F,GACA8F,cACGJ,EAGHA,IAAa,IAAAK,sBAAqBR,EAAavG,EAAK,EAAAE,YAAYoF,eAF1D,EAAAkB,KAAKd,kBAAkBa,EAAYzB,G,CAK/C,MAEMkC,GAAyB,IAAA/C,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAEjE,MAAM,KAAEiG,GAASlH,EAEjB,GAAIkH,EAAKC,WACP,OAAOlG,EACL,IAAI,EAAAC,SAAS,gCAAiC,EAAAf,YAAY0D,eAI9D,MAAMuD,QAA0BF,EAAKG,oBAC/BC,GAAU,IAAAT,aAAY7G,GAQ5B,SAPwB,IAAI,EAAA4G,MAC1BM,EACA,GAAGI,EAAQR,4BAA4BM,IACvC,+CACAnG,GACAsG,wBAEa,CAEb,SADML,EAAKR,KAAK,CAAEc,oBAAoB,IAClC,gBAAyB1I,EAAMC,IAAIC,MAAQkI,EAAKC,WAClD,OAAOlH,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CACrCQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,kFAGNqB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,iF,CAGR,MAEM6I,GAAS,IAAAvD,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,MAAEyG,GAAU1H,EAAIgF,OAEhB2C,QAAuB,IAAAC,qBAAoBF,GAE3CG,QAAkB,EAAApB,KAAKqB,QAAQ,CACnCV,kBAAmBO,EAAeI,cAGpC,OAAKF,EASDA,EAAKG,WACA/G,EAAK,IAAI,EAAAC,SAAS,wBAAyB,EAAAf,YAAYgD,YAGhE0E,EAAKT,uBAAoBa,EACzBJ,EAAKG,YAAa,QACZH,EAAKnB,KAAK,CAAEc,oBAAoB,SAEtCvH,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QAAS,gCAlBFqC,EACL,IAAI,EAAAC,SACF,yCACA,EAAAf,YAAY0D,cAiBpB,MAEMqE,GAAS,IAAAhE,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,MAAEgF,EAAK,SAAEC,GAAalG,EAAIsF,KAEhC,IAAKW,IAAUC,EACb,OAAOjF,EACL,IAAI,EAAAC,SACF,wCACA,EAAAf,YAAY2C,cAKlB,MAAM+E,QAAa,EAAApB,KAAKqB,QAAQ,CAAE7B,UAASkC,OAAO,aAClD,OAAKN,UAQOA,EAAKO,OAAOC,QAAQC,cAAcpC,EAAU2B,EAAK3B,gBAS7D,IAAAc,sBAAqBa,EAAM5H,GAhBlBgB,EACL,IAAI,EAAAC,SACF,qCACA,EAAAf,YAAY2C,aAcpB,MAaMyF,GAAU,IAAArE,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CACvD,IAAIyG,EAAQ,GAWZ,GATE1H,EAAIwI,QAAQC,eACZzI,EAAIwI,QAAQC,cAAcvG,WAAW,YAErCwF,EAAQ1H,EAAIwI,QAAQC,cAAcC,MAAM,KAAK,IAE3C1I,EAAI2I,SAAW3I,EAAI2I,QAAQC,MAC7BlB,EAAQ1H,EAAI2I,QAAQC,MAGjBlB,EACH,OAAOzG,EACL,IAAI,EAAAC,SACF,wCACA,EAAAf,YAAY0D,eAKlB,MAAMgF,QAA0B,IAAAC,WAAUF,EAAInB,OAAd,CAC9BC,EACAqB,QAAQC,IAAIC,gBAGRC,QAAkB,EAAAzC,KAAKvB,SAAS2D,EAAa9D,IACnD,OAAKmE,EASDA,EAAUC,qBAAqBN,EAAaO,KACvCnI,EACL,IAAI,EAAAC,SACF,wFACA,EAAAf,YAAY0D,gBAKlB7D,EAAIkH,KAAOgC,OACXjI,KAlBSA,EACL,IAAI,EAAAC,SACF,8CACA,EAAAf,YAAY0D,cAgBpB,MAGMwF,GAAiB,IAAAnF,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACzD,MAAM4G,QAAa,EAAApB,KAAKqB,QAAQ,CAAE7B,MAAOjG,EAAIsF,KAAKW,QAClD,IAAK4B,EACH,OAAO5G,EACL,IAAI,EAAAC,SACF,wCACA,EAAAf,YAAYiB,YAKlB,IAAwB,IAApByG,EAAKG,WACP,OAAO/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,eAI5D,MAAMyF,QAA2BzB,EAAK0B,2BAChCjC,GAAU,IAAAT,aAAY7G,GAE5B,IAOE,SANwB,IAAI,EAAA4G,MAC1BiB,EACA,GAAGP,EAAQR,oCAAoCwC,IAC/C,kDACArI,GACAuI,oBACa,CAEb,SADM3B,EAAKnB,KAAK,CAAEc,oBAAoB,IAClC,gBAAyB1I,EAAMC,IAAIC,IACrC,OAAOiB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CACrCQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,4EAINqB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,2E,EAGN,MAAOiD,GAIP,OAHAgG,EAAKyB,wBAAqBrB,EAC1BJ,EAAK4B,0BAAuBxB,QACtBJ,EAAKnB,KAAK,CAAEc,oBAAoB,IAC/BvG,EACL,IAAI,EAAAC,SACF,kDACA,EAAAf,YAAY4B,uB,CAIpB,MAEM2H,GAAgB,IAAAxF,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACxD,MAAMyG,QAAc,IAAAE,qBAAoB5H,EAAIgF,OAAO0C,OAE7CG,QAAa,EAAApB,KAAKqB,QAAQ,CAC9BwB,mBAAoB5B,EAAMK,YAC1B0B,qBAAsB,CAAEE,IAAKC,KAAKC,SAGpC,OAAKhC,GAImB,IAApBA,EAAKG,WACA/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,gBAI5DgE,EAAK3B,SAAWlG,EAAIsF,KAAKY,SACzB2B,EAAK1B,gBAAkBnG,EAAIsF,KAAKa,gBAChC0B,EAAK4B,0BAAuBxB,EAC5BJ,EAAKyB,wBAAqBrB,QACpBJ,EAAKnB,YAEX,IAAAM,sBAAqBa,EAAM5H,IAflBgB,EAAK,IAAI,EAAAC,SAAS,oBAAqB,EAAAf,YAAY2C,aAgB9D,MAGMgH,GAAiB,IAAA5F,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CAC9D,MAAM4G,QAAa,EAAApB,KAAKvB,SAASlF,EAAIkH,KAAKnC,IAAIoD,OAAO,aAErD,IAAwB,IAApBN,EAAKG,WACP,OAAO/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,eAI5D,MAAM,SAAEqC,EAAQ,gBAAEC,GAAoBnG,EAAIsF,KAE1C,IAAKuC,EAAKS,cAAcnC,EAAiB0B,EAAK3B,UAC5C,OAAOjF,EAAK,IAAI,EAAAC,SAAS,sBAAuB,EAAAf,YAAY2C,cAG9D+E,EAAK3B,SAAWA,EAChB2B,EAAK1B,gBAAkBA,QACjB0B,EAAKnB,QAEX,IAAAM,sBAAqBa,EAAM5H,EAC7B,MAGM8J,GAAU,IAAA7F,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CACvD,IAAKjB,EAAIkH,OAASlH,EAAIkH,KAAK8C,aACzB,OAAO/I,EACL,IAAI,EAAAC,SACF,uCACA,EAAAf,YAAY0D,eAIlB,MAAMqF,QAAkB,EAAAzC,KAAKqB,QAAQ,CAAEkC,aAAchK,EAAIkH,KAAK8C,eAG9D,SAFMd,EAAUxC,KAAK,CAAEc,oBAAoB,KAEtC0B,EACH,OAAOjI,EAAK,IAAI,EAAAC,SAAS,uCAAwC,OAGnE,IAAA8F,sBAAqBkC,EAAWjJ,EAClC,MAEa,EAAAgK,SAAW,CACtBpE,SACAoB,yBACAQ,SACAS,SACAgC,OAhMa,CAACC,EAAMlK,KACpBA,EAAImK,OAAO,MAAO,YAAa,CAC7BC,QAAS,IAAIT,KAAKA,KAAKC,MAAQ,KAC/BS,UAAU,IAEZrK,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,SACrB,EA0LFiI,UACAc,iBACAK,gBACAI,iBACAC,U,kKCtWF,4EAAS,gFAAAQ,OAAO,IAChB,4FACA,6FACA,6FACA,8FACA,yFACA,0FACA,4FACA,2FACA,gGACA,gG,kICTA,qEACA,gEAEMjJ,EAAS,EAAAC,eAAeC,UAAoC,WAC5DC,EAAS,EAAAF,eAAeE,OAAiC,WACzDC,EAAS,EAAAH,eAAeG,OAAiB,WACzCC,EAAY,EAAAJ,eAAeI,UAAoC,WAC/DC,EAAY,EAAAL,eAAeK,UAA0B,WAE3D,UAAe,CACbH,SACAH,SACAI,SACAC,YACAC,Y,yICdF,qEACA,0DAGMN,EAAS,EAAAC,eAAeC,UAC5B,EAAAgJ,cAEI/I,EAAS,EAAAF,eAAeE,OAC5B,EAAA+I,cAEI9I,EAAS,EAAAH,eAAeG,OAAwB,EAAA8I,cAChD7I,EAAY,EAAAJ,eAAeI,UAG/B,EAAA6I,cACI5I,EAAY,EAAAL,eAAeK,UAAiC,EAAA4I,cAElE,UAAe,CACb/I,SACAH,SACAI,SACAC,YACAC,Y,4KCtBF,2CACA,YACA,0DACA,oBACA,yDAQA,yDAEMiE,GAAS,IAAA3B,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,YACJwJ,EAAW,MACXxE,EAAK,YACLyE,EAAW,cACXC,EAAa,YACbC,EAAW,SACX1E,EAAQ,gBACRC,EAAe,MACfH,EAAK,MACLM,GACEtG,EAAIsF,KAEFiB,EAAW,CACfkE,cACAxE,QACAyE,cACA1E,QACAM,QACAqE,gBACAC,cACA1E,WACAC,mBAIIK,EAAc,IAAI,EAAAqE,MAAMtE,GAG9B,SAFmBC,EAAYE,OAErB,CAER,MAAMC,QAAkB,IAAI,EAAAC,MAC1BL,GACA,IAAAM,aAAY7G,GAAK8G,aACjB,kEACA7F,GACA8F,cACGJ,EAGHA,IAAa,IAAAK,sBAAqBR,EAAavG,EAAK,EAAAE,YAAYoF,eAF1D,EAAAsF,MAAMlF,kBAAkBa,EAAYzB,G,CAKhD,MAEMkC,GAAyB,IAAA/C,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CAEjE,MAAM,KAAEiG,GAASlH,EAEjB,GAAIkH,EAAKc,WACP,OAAO/G,EACL,IAAI,EAAAC,SAAS,gCAAiC,EAAAf,YAAY0D,eAI9D,MAAMuD,QAA0BF,EAAKG,oBAC/BC,GAAU,IAAAT,aAAY7G,GAQ5B,SAPwB,IAAI,EAAA4G,MAC1BM,EACA,GAAGI,EAAQR,6BAA6BM,IACxC,+CACAnG,GACAsG,wBAEa,CAEb,SADML,EAAKR,KAAK,CAAEc,oBAAoB,IAClC,gBAAyB1I,EAAMC,IAAIC,MAAQkI,EAAKc,WAClD,OAAO/H,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CACrCQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,kFAGNqB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,iF,CAGR,MAEM6I,GAAS,IAAAvD,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,MAAEyG,GAAU1H,EAAIgF,OAEhB2C,QAAuB,IAAAC,qBAAoBF,GAE3CoD,QAAmB,EAAAD,MAAM/C,QAAQ,CACrCV,kBAAmBO,EAAeI,cAGpC,OAAK+C,EASDA,EAAM9C,WACD/G,EAAK,IAAI,EAAAC,SAAS,0BAA2B,EAAAf,YAAYgD,YAGlE2H,EAAM1D,uBAAoBa,EAC1B6C,EAAM9C,YAAa,QACb8C,EAAMpE,KAAK,CAAEc,oBAAoB,SAEvCvH,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QAAS,iCAlBFqC,EACL,IAAI,EAAAC,SACF,yCACA,EAAAf,YAAY0D,cAiBpB,MAEMqE,GAAS,IAAAhE,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACjD,MAAM,MAAEgF,EAAK,SAAEC,GAAalG,EAAIsF,KAEhC,IAAKW,IAAUC,EACb,OAAOjF,EACL,IAAI,EAAAC,SACF,wCACA,EAAAf,YAAY2C,cAKlB,MAAMgI,QAAc,EAAAD,MAAM/C,QAAQ,CAAE7B,UAASkC,OAAO,aACpD,OAAK2C,UAQOA,EAAM1C,OAAOC,QAAQC,cAAcpC,EAAU4E,EAAM5E,gBAQ/D,IAAAc,sBAAqB8D,EAAO7K,GAfnBgB,EACL,IAAI,EAAAC,SACF,qCACA,EAAAf,YAAY2C,aAapB,MAaMyF,GAAU,IAAArE,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CACvD,IAAIyG,EAAQ,GAWZ,GATE1H,EAAIwI,QAAQC,eACZzI,EAAIwI,QAAQC,cAAcvG,WAAW,YAErCwF,EAAQ1H,EAAIwI,QAAQC,cAAcC,MAAM,KAAK,IAE3C1I,EAAI2I,SAAW3I,EAAI2I,QAAQC,MAC7BlB,EAAQ1H,EAAI2I,QAAQC,MAGjBlB,EACH,OAAOzG,EACL,IAAI,EAAAC,SACF,wCACA,EAAAf,YAAY0D,eAKlB,MAAMgF,QAA0B,IAAAC,WAAUF,EAAInB,OAAd,CAC9BC,EACAqB,QAAQC,IAAIC,gBAGR8B,QAAwB,EAAAF,MAAM3F,SAAS2D,EAAa9D,IAC1D,OAAKgG,EASDA,EAAW5B,qBAAqBN,EAAaO,KACxCnI,EACL,IAAI,EAAAC,SACF,0FACA,EAAAf,YAAY0D,gBAKlB7D,EAAIkH,KAAO6D,OACX9J,KAlBSA,EACL,IAAI,EAAAC,SACF,8CACA,EAAAf,YAAY0D,cAgBpB,MAGMwF,GAAiB,IAAAnF,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACzD,MAAM6J,QAAmB,EAAAD,MAAM/C,QAAQ,CAAE7B,MAAOjG,EAAIsF,KAAKW,QACzD,IAAK6E,EACH,OAAO7J,EACL,IAAI,EAAAC,SACF,yCACA,EAAAf,YAAYiB,YAKlB,IAAyB,IAArB0J,EAAM9C,WACR,OAAO/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,eAI5D,MAAMyF,QAA2BwB,EAAMvB,2BACjCjC,GAAU,IAAAT,aAAY7G,GAE5B,IAOE,SANwB,IAAI,EAAA4G,MAC1BkE,EACA,GAAGxD,EAAQR,qCAAqCwC,IAChD,kDACArI,GACAuI,oBACa,CAEb,SADMsB,EAAMpE,KAAK,CAAEc,oBAAoB,IACnC,gBAAyB1I,EAAMC,IAAIC,IACrC,OAAOiB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CACrCQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,4EAINqB,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,QACrB1B,QACE,2E,EAGN,MAAOiD,GAIP,OAHAiJ,EAAMxB,wBAAqBrB,EAC3B6C,EAAMrB,0BAAuBxB,QACvB6C,EAAMpE,KAAK,CAAEc,oBAAoB,IAChCvG,EACL,IAAI,EAAAC,SACF,kDACA,EAAAf,YAAY4B,uB,CAIpB,MAEM2H,GAAgB,IAAAxF,aAAW,CAAOlE,EAAKC,EAAKgB,IAAS,EAAD,4CACxD,MAAMyG,QAAc,IAAAE,qBAAoB5H,EAAIgF,OAAO0C,OAE7CoD,QAAc,EAAAD,MAAM/C,QAAQ,CAChCwB,mBAAoB5B,EAAMK,YAC1B0B,qBAAsB,CAAEE,IAAKC,KAAKC,SAGpC,OAAKiB,GAIoB,IAArBA,EAAM9C,WACD/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,gBAI5DiH,EAAM5E,SAAWlG,EAAIsF,KAAKY,SAC1B4E,EAAM3E,gBAAkBnG,EAAIsF,KAAKa,gBACjC2E,EAAMrB,0BAAuBxB,EAC7B6C,EAAMxB,wBAAqBrB,QACrB6C,EAAMpE,YAEZ,IAAAM,sBAAqB8D,EAAO7K,IAfnBgB,EAAK,IAAI,EAAAC,SAAS,oBAAqB,EAAAf,YAAY2C,aAgB9D,MAGMgH,GAAiB,IAAA5F,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CAC9D,MAAM6J,QAAmB,EAAAD,MAAM3F,SAASlF,EAAIkH,KAAKnC,IAAIoD,OAAO,aAE5D,IAAyB,IAArB2C,EAAM9C,WACR,OAAO/G,EACL,IAAI,EAAAC,SAAS,8BAA+B,EAAAf,YAAY0D,eAI5D,MAAM,SAAEqC,EAAQ,gBAAEC,GAAoBnG,EAAIsF,KAE1C,IAAKwF,EAAMxC,cAAcnC,EAAiB2E,EAAM5E,UAC9C,OAAOjF,EAAK,IAAI,EAAAC,SAAS,sBAAuB,EAAAf,YAAY2C,cAG9DgI,EAAM5E,SAAWA,EACjB4E,EAAM3E,gBAAkBA,QAClB2E,EAAMpE,QAEZ,IAAAM,sBAAqB8D,EAAO7K,EAC9B,MAGM8J,GAAU,IAAA7F,aAAW,CAAOlE,EAAUC,EAAKgB,IAAS,EAAD,4CACvD,IAAKjB,EAAIkH,KACP,OAAOjG,EACL,IAAI,EAAAC,SACF,uCACA,EAAAf,YAAY0D,eAIlB,MAAMkH,QAAmB,EAAAF,MAAM3F,SAASlF,EAAIkH,KAAKnC,IAGjD,GAFAgG,EAAWrE,KAAK,CAAEc,oBAAoB,KAEjCuD,EACH,OAAO9J,EAAK,IAAI,EAAAC,SAAS,uCAAwC,OAGnE,IAAA8F,sBAAqB+D,EAAY9K,EACnC,MAEa,EAAA+K,UAAY,CACvBnF,SACAoB,yBACAQ,SACAS,SACAgC,OAhMa,CAACC,EAAMlK,KACpBA,EAAImK,OAAO,MAAO,YAAa,CAC7BC,QAAS,IAAIT,KAAKA,KAAKC,MAAQ,KAC/BS,UAAU,IAEZrK,EAAIC,OAAO,EAAAC,YAAYC,IAAIV,KAAK,CAC9BQ,OAAQpB,EAAMuB,OAAOC,SACrB,EA0LFiI,UACAc,iBACAK,gBACAI,iBACAC,U,qIClWF,gEACA,+DAEMzI,EAAS,EAAAC,eAAeC,UAA4B,EAAAyJ,UACpDxJ,EAAS,EAAAF,eAAeE,OAAyB,EAAAwJ,UACjDvJ,EAAS,EAAAH,eAAeG,OAAoB,EAAAuJ,UAC5CtJ,EAAY,EAAAJ,eAAeI,UAA4B,EAAAsJ,UACvDrJ,EAAY,EAAAL,eAAeK,UAAe,EAAAqJ,UAEhD,UAAe,CACbxJ,SACAH,SACAI,SACAC,YACAC,Y,mIChBF,qEACA,0DAGMN,EAAS,EAAAC,eAAeC,UAAsC,EAAA0J,QAC9DzJ,EAAS,EAAAF,eAAeE,OAAmC,EAAAyJ,QAC3DxJ,EAAS,EAAAH,eAAeG,OAAkB,EAAAwJ,QAC1CvJ,EAAY,EAAAJ,eAAeI,UAAsC,EAAAuJ,QACjEtJ,EAAY,EAAAL,eAAeK,UAA2B,EAAAsJ,QAE5D,UAAe,CACbzJ,SACAH,SACAI,SACAC,YACAC,Y,0HChBF,sBAcMuJ,EAAwB,IAAI,EAAAC,OAChC,CACEC,MAAO,CACLC,KAAMC,OACNC,QAAS,EAAC,EAAM,+BAElBC,UAAW,CACTH,KAAM1B,KACNW,QAASX,KAAKC,OAEhB6B,gBAAiB,CACfJ,KAAMC,OACNI,SAAU,EAAC,EAAM,kCAEnBC,KAAM,CACJN,KAAMO,QACNtB,SAAS,GAIXO,MAAO,CACLQ,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,QACLL,SAAU,EAAC,EAAM,8CAEnBM,SAAU,CACRX,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,WACLL,SAAU,EAAC,EAAM,kCAGrB,CACEO,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpBE,EAAU,UAASC,MACvB,UACAnB,GAEF,UAAekB,C,0ICtDf,gBACA,iBACA,gBACA,YACA,yDA2CME,EAAqB,IAAI,EAAAnB,OAC7B,CACEtF,UAAW,CACTwF,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBc,MAAM,GAER1G,SAAU,CACRuF,KAAMkB,OACNb,SAAU,EAAC,EAAM,gCACjBc,MAAM,GAERxG,MAAO,CACLqF,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBe,QAAQ,EACRC,WAAW,EACXC,SAAU,CAAC,UAAUC,QAAS,yCAEhC7G,MAAO,CACLsF,KAAMkB,OACNb,SAAU,EAAC,EAAM,8BACjBiB,SAAU,CACR,UAAUE,cACV,wCAGJ5G,SAAU,CACRoF,KAAMkB,OACNb,SAAU,EAAC,EAAM,+BACjBoB,UAAW,CAAC,EAAG,kDACf5E,QAAQ,GAEVhC,gBAAiB,CACfmF,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBiB,SAAU,CACRI,UAAW,SAAU7G,GACnB,OAAOA,IAAoB8G,KAAK/G,QAClC,EACAtH,QAAS,gCAGbwH,SAAU,CACRkF,KAAMC,OACNI,SAAU,EAAC,EAAM,gCAEnBtF,eAAgB,CACdiF,KAAM1B,KACN+B,SAAU,EAAC,EAAM,wCAEnBrF,MAAO,CACLgF,KAAMkB,OACNb,SAAU,EAAC,EAAM,8BAEnB3D,WAAY,CACVsD,KAAMO,QACNtB,SAAS,GAEX2C,SAAU,CACR5B,KAAMO,QACNtB,SAAS,EACTpC,QAAQ,GAEVsD,UAAW,CACTH,KAAM1B,KACNW,QAASX,KAAKC,OAEhBsD,SAAU,CACR7B,KAAMO,QACNtB,SAAS,GAEX6C,aAAcZ,OACda,gBAAiB9B,OACjB+B,aAAcd,OACde,cAAef,OACflD,mBAAoBkD,OACpBpF,kBAAmBoF,OACnBgB,kBAAmB5D,KACnBH,qBAAsBG,KACtBI,aAAcwC,OAEdiB,aAAc,CACZnC,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,gBAEP0B,WAAY,CACV,CACEpC,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,aAGT2B,SAAU,CACR,CACErC,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,iBAIX,CACEE,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAK1BI,EAAWqB,IAAI,QAAQ,SAAU3M,GAC/B,IAAKgM,KAAKY,WAAW,aAAeZ,KAAKa,MAAO,OAAO7M,IAEvDgM,KAAKO,kBAAqB5D,KAAKC,MAAQ,IACvC5I,GACF,IAGAsL,EAAWqB,IAAI,QAAQ,SAAgB3M,G,mDACrC,IAAKgM,KAAKY,WAAW,YAAa,OAAO5M,IAEzC,MAAMiF,QAAiB6H,EAAOC,KAAKf,KAAK/G,SAAU,IAClD+G,KAAK/G,SAAWA,EAChB+G,KAAK9G,qBAAkB8B,EAEvBhH,GACF,G,IAEAsL,EAAWqB,IAAI,QAAQ,SAAgB3M,G,mDACrC,MAAMyG,GAAgB,UAChBsC,QAAqB+D,EAAOC,KAAKtG,EAAO,GAC9CuF,KAAKjD,aAAeA,EAEpB/I,GACF,G,IAEAsL,EAAWlE,QAAQC,cAAgB,SACjC2F,EACA/H,G,mDAEA,OAAO6H,EAAOG,YAAYD,EAAmB/H,EAC/C,G,EAEAqG,EAAWlE,QAAQc,qBAAuB,SAAUgF,GAClD,GAAIlB,KAAKO,kBAAmB,CAK1B,OAAOW,EAJkBC,SACtBnB,KAAKO,kBAAkBa,UAAY,IACpC,G,CAIJ,OAAO,CACT,EAEA9B,EAAWlE,QAAQkB,yBAA2B,W,mDAC5C,MAAM+E,QAAmB,IAAA1G,uBAKzB,OAHAqF,KAAK3D,mBAAqBgF,EAAWvG,YACrCkF,KAAKxD,qBAAuBG,KAAKC,MAAQ,IAElCyE,EAAW5G,KACpB,G,EAEA6E,EAAWlE,QAAQhB,kBAAoB,W,mDACrC,MAAMkH,QAAoB,IAAA3G,uBAI1B,OAFAqF,KAAK7F,kBAAoBmH,EAAYxG,YAE9BwG,EAAY7G,KACrB,G,EAGA,MAAMjB,EAAmB,UAAS6F,MAChC,OACAC,GAEF,UAAe9F,C,8HC5Nf,sBAUM+H,EAAwB,IAAI,EAAApD,OAChC,CAEEvD,KAAM,CACJyD,KAAM,EAAAF,OAAOU,MAAMC,SACnBJ,SAAU,EAAC,EAAM,uCAGrB,CACEO,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpBsC,EAAiC,UAASnC,MAG9C,cAAekC,GACjB,UAAeC,C,kNC5Bf,sEAAS,yEAAAlE,OAAO,IAChB,mEAAS,sEAAAA,OAAO,IAChB,oEAAS,uEAAAA,OAAO,IAChB,uEAAS,0EAAAA,OAAO,IAChB,qEAAS,wEAAAA,OAAO,IAChB,2EAAS,8EAAAA,OAAO,IAChB,0EAAS,6EAAAA,OAAO,IAChB,2EAAS,8EAAAA,OAAO,G,2ICNhB,2CAMA,gBACA,iBACA,gBACA,YACA,yDAkEMmE,EAAsB,IAAI,EAAAtD,OAC9B,CACEX,YAAa,CACXa,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBc,MAAM,GAERxG,MAAO,CACLqF,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBe,QAAQ,EACRC,WAAW,EACXC,SAAU,CAAC,UAAUC,QAAS,yCAEhC7G,MAAO,CACLsF,KAAMkB,OACNb,SAAU,EAAC,EAAM,8BACjBiB,SAAU,CACR,UAAUE,cACV,wCAGJpC,YAAa,CACXY,KAAM1B,KACN+B,SAAU,EAAC,EAAM,kCAEnBrF,MAAO,CACLgF,KAAMkB,OACNb,SAAU,EAAC,EAAM,8BAEnB7F,UAAW0G,OACXzG,SAAUyG,OACVmC,SAAUnC,OACVoC,SAAUpC,OACVqC,cAAehD,QACfiD,MAAOtC,OACPuC,eAAgB,CACdC,eAAgB,CACdC,WAAY,CACV3D,KAAMkB,OACN0C,KAAM,EAAAC,aAERC,WAAY,CACV9D,KAAMkB,OACN0C,KAAM,EAAAG,aAERC,qBAAsB,CACpBhE,KAAMkB,OACN0C,KAAM,EAAAK,uBAERC,cAAehD,OACfiD,2BAA4B7F,KAC5B8F,QAAS9F,KACT+F,gBAAiBnD,QAEnBoD,qBAAsB,CACpBC,kBAAmB,CAACrD,QACpBsD,qBAAsB,CAACtD,SAEzBuD,qBAAsBvD,QAExBwD,oBAAqB,CACnBC,OAAQzD,OACR0D,eAAgB,CAAC1D,SAEnBtG,SAAU,CACRoF,KAAMkB,OACNb,SAAU,EAAC,EAAM,+BACjBoB,UAAW,CAAC,EAAG,kDACf5E,QAAQ,GAEVhC,gBAAiB,CACfmF,KAAMkB,OACNb,SAAU,EAAC,EAAM,iCACjBiB,SAAU,CACRI,UAAW,SAAU7G,GACnB,OAAOA,IAAoB8G,KAAK/G,QAClC,EACAtH,QAAS,gCAGbgM,YAAa,CACXU,KAAMkB,OACNb,SAAU,EAAC,EAAM,mCACjBuD,KAAM,EAAAiB,cAERxF,cAAe,CACbW,KAAMC,OACNI,SAAU,EAAC,EAAM,sCAEnB3D,WAAY,CACVsD,KAAMO,QACNtB,SAAS,GAEX2C,SAAU,CACR5B,KAAMO,QACNtB,SAAS,EACTpC,QAAQ,GAEVsD,UAAW,CACTH,KAAM1B,KACNW,QAASX,KAAKC,OAEhBsD,SAAU,CACR7B,KAAMO,QACNtB,SAAS,GAEXgD,cAAef,OACflD,mBAAoBkD,OACpBpF,kBAAmBoF,OACnBgB,kBAAmB5D,KACnBH,qBAAsBG,KACtBI,aAAcwC,OAGd4D,QAAS,CACP,CACE9E,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,WAGTqE,SAAU,CACR,CACE/E,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,YAGT2B,SAAU,CACR,CACErC,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,kBAIX,CACEE,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAK1BuC,EAAYd,IAAI,QAAQ,SAAU3M,GAChC,IAAKgM,KAAKY,WAAW,aAAeZ,KAAKa,MAAO,OAAO7M,IAEvDgM,KAAKO,kBAAqB5D,KAAKC,MAAQ,IACvC5I,GACF,IAGAyN,EAAYd,IAAI,QAAQ,SAAgB3M,G,mDACtC,IAAKgM,KAAKY,WAAW,YAAa,OAAO5M,IAEzC,MAAMiF,QAAiB6H,EAAOC,KAAKf,KAAK/G,SAAU,IAClD+G,KAAK/G,SAAWA,EAChB+G,KAAK9G,qBAAkB8B,EAEvBhH,GACF,G,IAEAyN,EAAYd,IAAI,QAAQ,SAAgB3M,G,mDACtC,MAAMqP,GAAsB,UACtBtG,QAAqB+D,EAAOC,KAAKsC,EAAa,GACpDrD,KAAKjD,aAAeA,EAEpB/I,GACF,G,IAEAyN,EAAYrG,QAAQC,cAAgB,SAClC2F,EACA/H,G,mDAEA,OAAO6H,EAAOG,YAAYD,EAAmB/H,EAC/C,G,EAEAwI,EAAYrG,QAAQc,qBAAuB,SAAUgF,GACnD,GAAIlB,KAAKO,kBAAmB,CAK1B,OAAOW,EAJkBC,SACtBnB,KAAKO,kBAAkBa,UAAY,IACpC,G,CAIJ,OAAO,CACT,EAEAK,EAAYrG,QAAQkB,yBAA2B,W,mDAC7C,MAAM+E,QAAmB,IAAA1G,uBAKzB,OAHAqF,KAAK3D,mBAAqBgF,EAAWvG,YACrCkF,KAAKxD,qBAAuBG,KAAKC,MAAQ,IAElCyE,EAAW5G,KACpB,G,EAEAgH,EAAYrG,QAAQhB,kBAAoB,W,mDACtC,MAAMkH,QAAoB,IAAA3G,uBAI1B,OAFAqF,KAAK7F,kBAAoBmH,EAAYxG,YAE9BwG,EAAY7G,KACrB,G,EAEA,MAAMmD,EAAqB,UAASyB,MAClC,QACAoC,GAEF,UAAe7D,C,+HC3Rf,sBAUM2D,EAAwB,IAAI,EAAApD,OAChC,CAEEN,MAAO,CACLQ,KAAM,EAAAF,OAAOU,MAAMC,SACnBJ,SAAU,EAAC,EAAM,uCAGrB,CACEO,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpB3B,EAAmC,UAAS8B,MAGhD,eAAgBkC,GAClB,UAAehE,C,2HC5Bf,iDAMA,gBACA,iBAmCM+F,EAAyB,IAAI,EAAAnF,OACjC,CACE9I,MAAO,CACLgJ,KAAMkB,OACNb,SAAU,EAAC,EAAM,+BACjBc,MAAM,GAER+D,mBAAoB,CAClB1K,UAAW,CACTwF,KAAMkB,OACNb,SAAU,EAAC,EAAM,4CACjBc,MAAM,GAER1G,SAAU,CACRuF,KAAMkB,OACNb,SAAU,EAAC,EAAM,2CACjBc,MAAM,GAERxG,MAAO,CACLqF,KAAMkB,OACNb,SAAU,EAAC,EAAM,uCACjBgB,WAAW,EACXC,SAAU,CACR,UAAUC,QACV,8CAGJ7G,MAAO,CACLsF,KAAMkB,OACNb,SAAU,EAAC,EAAM,8CACjBiB,SAAU,CACR,UAAUE,cACV,sDAIN2D,aAAc,CACZnF,KAAM,CACJA,KAAMkB,OACNb,SAAU,EAAC,EAAM,8BACjBuD,KAAM,EAAAwB,eAERC,MAAO,CACLrF,KAAMC,OACNI,SAAU,EAAC,EAAM,wCAEnBiF,SAAU,CACRtF,KAAMO,QACNtB,SAAS,IAGbsG,SAAU,CACRvF,KAAM,CACJA,KAAMkB,OACNjC,QAAS,QACT2E,KAAM,CAAC,UAET4B,YAAa,CACXxF,KAAM,CAACC,QACPI,SAAU,EAAC,EAAM,6CAEnBoF,QAAS,CACPzF,KAAMkB,OACNb,SAAU,EAAC,EAAM,2CAEnBqF,YAAa,CACX1F,KAAMkB,OACNb,SAAU,EAAC,EAAM,gDAGrBsF,QAAS,CACPC,QAAS,CACP5F,KAAMkB,OACNb,SAAU,EAAC,EAAM,6CACjBuD,KAAM,EAAAiC,UAERC,SAAU,CACR9F,KAAMkB,OACNb,SAAU,EAAC,EAAM,gDACjBuD,KAAM,EAAAmC,WAERC,kBAAmB,CACjBhG,KAAMO,QACNtB,SAAS,GAEXgH,mBAAoB,CAAC/E,SAEvBgF,gBAAiB,CACflG,KAAMC,OACNhB,QAAS,EACT2E,KAAM,EAAAuC,kBAERC,OAAQ,CACNpG,KAAM,CAACkB,QACPb,SAAU,EAAC,EAAM,uCAEnBqF,YAAa,CACX1F,KAAMkB,OACNb,SAAU,EAAC,EAAM,sCAEnBgG,UAAW,CAACnF,QAIZ3E,KAAM,CACJyD,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,OACLL,SAAU,EAAC,EAAM,+CAEnBiG,QAAS,CACPtG,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,WAEPoE,QAAS,CACP,CACE9E,KAAM,EAAAF,OAAOU,MAAMC,SACnBC,IAAK,YAIX,CACEE,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpBlB,EAAW,UAASqB,MAAM,WAAYiE,GAK5C,UAAetF,C,yHC7Kf,sBAaM4G,EAAuB,IAAI,EAAAzG,OAC/B,CACE0G,OAAQ,CACNxG,KAAMkB,OACNb,SAAU,EAAC,EAAM,2BACjBc,MAAM,GAERsF,OAAQ,CACNzG,KAAMC,OACNyG,IAAK,EACLtT,IAAK,GAEP+M,UAAW,CACTH,KAAM1B,KACNW,QAASX,KAAKC,OAIhBiB,MAAO,CACLQ,KAAM,UAASF,OAAOU,MAAMC,SAC5BC,IAAK,QACLL,SAAU,EAAC,EAAM,gCAEnBM,SAAU,CACRX,KAAM,UAASF,OAAOU,MAAMC,SAC5BC,IAAK,WACLL,SAAU,EAAC,EAAM,2CAGrB,CACEO,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpBjB,EAAuB,UAASoB,MACpC,SACAuF,GAEF,UAAe3G,C,+HCpDf,sBAYM+G,EAA6B,IAAI,EAAA7G,OACrC,CACE8G,aAAc,CACZ5G,KAAMkB,OACNb,SAAU,EAAC,EAAM,gDACjBc,MAAM,GAERhB,UAAW,CACTH,KAAM1B,KACNW,QAASX,KAAKC,OAEhBsI,YAAa,CACX7G,KAAMC,OACNI,SAAU,EAAC,EAAM,kDAInB9D,KAAM,CACJyD,KAAM,UAASF,OAAOU,MAAMC,SAC5BC,IAAK,OACLL,SAAU,EAAC,EAAM,8CAGrB,CACEO,OAAQ,CAAEC,UAAU,GACpBC,SAAU,CAAED,UAAU,KAIpBiG,EAAmC,UAAS9F,MAGhD,eAAgB2F,GAClB,UAAeG,C,2HC7Cf,MAEMC,GAAS,EAFf,aAEeC,UAEf,UAAeD,C,wHCJf,iDACA,eACA,+DAKMA,GAAS,IAAAC,UAGfD,EAAOE,KAAK,EAAAhS,WAAWiS,OAAQ,EAAAvI,SAASpE,QACxCwM,EAAOE,KACL,EAAAhS,WAAWkS,cACX,EAAAxI,SAAS1B,QACT,EAAA0B,SAAShD,wBAEXoL,EAAOE,KACL,GAAG,EAAAhS,WAAWkS,uBACd,EAAAxI,SAAS1B,QACT,EAAA0B,SAASxC,QAEX4K,EAAOE,KAAK,EAAAhS,WAAWmS,OAAQ,EAAAzI,SAAS/B,QACxCmK,EAAOE,KAAK,EAAAhS,WAAWoS,YAAa,EAAA1I,SAAS1B,QAAS,EAAA0B,SAASF,SAC/DsI,EAAOE,KAAK,EAAAhS,WAAWqS,eAAgB,EAAA3I,SAASZ,gBAChDgJ,EAAOE,KAAK,GAAG,EAAAhS,WAAWsS,uBAAwB,EAAA5I,SAASP,eAC3D2I,EAAOE,KACL,EAAAhS,WAAWuS,eACX,EAAA7I,SAAS1B,QACT,EAAA0B,SAASH,gBAEXuI,EAAOE,KAAK,EAAAhS,WAAWwS,OAAQ,EAAA9I,SAASC,QAWxC,UAAemI,C,+HCzCf,MAEMA,GAAS,EAFf,aAEeC,UAEf,UAAeD,C,kQCJf,wEAAS,gFAAA9H,OAAO,IAChB,oEAAS,4EAAAA,OAAO,IAChB,qEAAS,6EAAAA,OAAO,IAChB,uEAAS,+EAAAA,OAAO,IAChB,sEAAS,8EAAAA,OAAO,IAChB,4EAAS,oFAAAA,OAAO,IAChB,2EAAS,mFAAAA,OAAO,IAChB,4EAAS,oFAAAA,OAAO,G,yHCPhB,iDACA,eACA,+DAKM8H,GAAS,IAAAC,UAGfD,EAAOE,KAAK,EAAAhS,WAAWiS,OAAQ,EAAAxH,UAAUnF,QACzCwM,EAAOE,KACL,EAAAhS,WAAWkS,cACX,EAAAzH,UAAUzC,QACV,EAAAyC,UAAU/D,wBAEZoL,EAAOE,KACL,GAAG,EAAAhS,WAAWkS,uBACd,EAAAzH,UAAUzC,QACV,EAAAyC,UAAUvD,QAEZ4K,EAAOE,KAAK,EAAAhS,WAAWmS,OAAQ,EAAA1H,UAAU9C,QACzCmK,EAAOE,KAAK,EAAAhS,WAAWoS,YAAa,EAAA3H,UAAUzC,QAAS,EAAAyC,UAAUjB,SACjEsI,EAAOE,KAAK,EAAAhS,WAAWqS,eAAgB,EAAA5H,UAAU3B,gBACjDgJ,EAAOE,KAAK,GAAG,EAAAhS,WAAWsS,uBAAwB,EAAA7H,UAAUtB,eAC5D2I,EAAOE,KACL,EAAAhS,WAAWuS,eACX,EAAA9H,UAAUzC,QACV,EAAAyC,UAAUlB,gBAEZuI,EAAOE,KAAK,EAAAhS,WAAWwS,OAAQ,EAAA/H,UAAUd,QAWzC,UAAemI,C,gICzCf,MAEMA,GAAS,EAFf,aAEeC,UAEf,UAAeD,C,4HCJf,qBACA,6EAEMA,GAAS,IAAAC,UAEfD,EACGW,MAAM,KACNjT,IAAI,UAAmB0B,QACvB8Q,KAAK,UAAmBjR,QAC3B+Q,EACGW,MAAM,QACNjT,IAAI,UAAmB2B,QACvBuR,MAAM,UAAmBtR,WACzBuR,OAAO,UAAmBtR,WAE7B,UAAeyQ,C,0HCff,MAEMA,GAAS,EAFf,aAEeC,UAEf,UAAeD,C,gICJf,MAEMA,GAAS,EAFf,aAEeC,UAEf,UAAeD,C,oICHf,kBACA,kBACA,yDAEA,yDACA,2CAiHA,UA/GA,MAAMzL,MASJuM,YACEjM,EACAkM,EACAC,EACApS,GAEAgM,KAAKqG,GAAKpM,EAAKjB,MACfgH,KAAKsG,UAAYrM,EAAKpB,UACtBmH,KAAKuG,SAAWtM,EAAKnB,SACrBkH,KAAKmG,IAAMA,EACXnG,KAAKwG,KAAO,gBAAgB1K,QAAQC,IAAI0K,cACxCzG,KAAKhM,KAAOA,EACZgM,KAAKtG,WAAY,EACjBsG,KAAKoG,aAAeA,CACtB,CAEAM,cACE,MAAI,gBAAyB7U,EAAMC,IAAI0D,KAC7BmR,EAAmBC,gBAAgB,CACzCC,QAAS,WACTC,KAAMhL,QAAQC,IAAIgL,cAClBC,KAAM,CACJ/M,KAAM6B,QAAQC,IAAIkL,kBAClBC,KAAMpL,QAAQC,IAAIoL,sBAIjB,IAAAP,iBAAgB,CACrBhM,KAAMkB,QAAQC,IAAIqL,WAClBN,KAAMhL,QAAQC,IAAIsL,WAClBC,QAAQ,EACRN,KAAM,CACJ/M,KAAM6B,QAAQC,IAAIwL,eAClBL,KAAMpL,QAAQC,IAAIyL,iBAGxB,CAEMC,KAAKC,EAAkBC,G,mDA2B3B,MAAMC,EAAO,WAAW5H,KAAKmG,OAAOnG,KAAKmG,UACnC0B,EAAc,CAClBrB,KAAMxG,KAAKwG,KACXH,GAAIrG,KAAKqG,GACTsB,UACAC,cAII5H,KAAK0G,cACRoB,SAASD,GACTE,MAAK,IAAO/H,KAAKtG,WAAY,IAC7BsO,OAAM,KACLhI,KAAKtG,WAAY,EACjBsG,KAAKhM,KACH,IAAI,EAAAC,SAAS+L,KAAKoG,aAAc,EAAAlT,YAAY4B,uBAC7C,GAEP,G,CAGMgF,c,mDAEJ,aADMkG,KAAKyH,KAAK,eAAgB,qCACzBzH,KAAKtG,SACd,G,CAEM6C,oB,mDAEJ,aADMyD,KAAKyH,KAAK,gBAAiB,wBAC1BzH,KAAKtG,SACd,G,CAEMY,wB,mDAEJ,aADM0F,KAAKyH,KAAK,oBAAqB,6BAC9BzH,KAAKtG,SACd,G,4ICnHF,oBAAavC,YAGX+O,YAAY7O,EAAY4Q,GACtBjI,KAAK3I,MAAQA,EACb2I,KAAKiI,YAAcA,CACrB,CAEA3Q,SACE,MAAM4Q,EAAW,OAAH,UAAQlI,KAAKiI,aACJ,CAAC,OAAQ,OAAQ,QAAS,UAClCE,SAAS1R,UAAcyR,EAASzR,KAG/C,IAAI2R,EAAWC,KAAKC,UAAUJ,GAK9B,OAJAE,EAAWA,EAASG,QAAQ,wBAAyBtS,GAAU,IAAIA,MAEnE+J,KAAK3I,MAAQ2I,KAAK3I,MAAMD,KAAKiR,KAAKG,MAAMJ,IAEjCpI,IACT,CAEAzI,OACE,GAAIyI,KAAKiI,YAAY1Q,KAAM,CACzB,MAAMkR,EAASzI,KAAKiI,YAAY1Q,KAAKkE,MAAM,KAAKtJ,KAAK,KACrD6N,KAAK3I,MAAQ2I,KAAK3I,MAAME,KAAKkR,E,MAE7BzI,KAAK3I,MAAQ2I,KAAK3I,MAAME,KAAK,cAG/B,OAAOyI,IACT,CAEAxI,cACE,GAAIwI,KAAKiI,YAAYS,OAAQ,CAC3B,MAAMA,EAAS1I,KAAKiI,YAAYS,OAAOjN,MAAM,KAAKtJ,KAAK,KACvD6N,KAAK3I,MAAQ2I,KAAK3I,MAAM6D,OAAOwN,E,MAE/B1I,KAAK3I,MAAQ2I,KAAK3I,MAAM6D,OAAO,QAGjC,OAAO8E,IACT,CAEAvI,WACE,MAAMkR,EAA+B,EAAxB3I,KAAKiI,YAAYU,MAAY,EACpCC,EAAiC,EAAzB5I,KAAKiI,YAAYW,OAAa,IACtCC,GAAQF,EAAO,GAAKC,EAI1B,OAFA5I,KAAK3I,MAAQ2I,KAAK3I,MAAMwR,KAAKA,GAAMD,MAAMA,GAElC5I,IACT,E,sICrDF,+DACA,MAAa/L,iBAAiB6U,MAI5B5C,YAAYvU,EAAiBkD,GAC3BkU,MAAMpX,GAENqO,KAAKnL,WAAaA,EAClBmL,KAAK/M,OAAS,GAAG4B,IAAaI,WAAW,KACrCpD,EAAMuB,OAAO4V,KACbnX,EAAMuB,OAAO2B,MACjBiL,KAAKlJ,eAAgB,EAErBgS,MAAMG,kBAAkBjJ,KAAMA,KAAKkG,YACrC,EAdF,mB,wICIa,EAAAjP,WAETiS,GAMF,CAACnW,EAAcC,EAAegB,KAC5BkV,EAAGnW,EAAKC,EAAKgB,GAAMgU,MAAMhU,EAAK,C,+KCdrB,EAAAxB,UAAY,UACZ,EAAA2W,WAAa,UAC1B,SAAYrX,GACV,oBACA,mBACD,CAHD,CAAY,EAAAA,MAAA,EAAAA,IAAG,KAIf,SAAY4D,GACV,wBACA,oCACA,oDACA,wCACA,uCACD,CAND,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAOtB,SAAYtC,GACV,oBACA,cACA,eACD,CAJD,CAAY,EAAAA,SAAA,EAAAA,OAAM,I,mJCblB,6EACA,0EACA,+EACA,4EACA,8EACA,oFACA,8EACA,6DAAS,uEAAAkK,OAAO,G,yPCPH,EAAAlF,aAAe,gC,0OCA5B,oBACA,cACA,yDACA,2CAEA,gBACA,yDAQa,EAAAJ,QAAU,CAACF,EAAY9D,KAClC,IAAK,UAAS6K,MAAMC,SAASsK,QAAQtR,GACnC,OAAO9D,EACL,IAAI,EAAAC,SAAS,6BAA8B,EAAAf,YAAY2C,aACxD,EAQQ,EAAAwT,aAAgBpP,GACb0B,EAAI2N,KAChB,CAAExR,GAAImC,EAAKsP,IAAKvQ,MAAOiB,EAAKjB,OAC5B8C,QAAQC,IAAIC,eACZ,CACEwN,UAAW1N,QAAQC,IAAI0N,uBAchB,EAAA1P,qBAAuB,CAACE,EAAMjH,EAAK0W,EAAY,EAAAxW,YAAYC,MACtE,MAAMsH,GAAQ,IAAA4O,cAAapP,GAErB0P,EAAmB,CACvBvM,QAAS,IAAIT,KACXA,KAAKC,MAE0C,GAA5Cd,QAAQC,IAAI6N,sBAAqC,GAAK,GAAK,KAEhEvM,UAAU,EACVwM,SAAU,MACVvC,QAAQ,GAKV,MAHI,gBAAyBzV,EAAMC,IAAI0D,OAAMmU,EAAiBrC,QAAS,GACvEtU,EAAImK,OAAO,MAAO1C,EAAOkP,GAEpB1P,EAAKc,WAQH/H,EAAIC,OAAOyW,GAAWjX,KAAK,CAChCQ,OAAQpB,EAAMuB,OAAOC,QACrBoH,UATOzH,EAAIC,OAAOyW,GAAWjX,KAAK,CAChCQ,OAAQpB,EAAMuB,OAAOC,QACrBoH,QACA9I,QAAS,qCAOX,EAQS,EAAAgJ,oBAA6BmP,GAAyB,EAAD,4CAChE,IAAKA,EAAa,CAChB,MAAMC,EAAiBC,EAAOC,YAAY,IAAIC,SAAS,OAEvD,MAAO,CACLzP,MAAOsP,EACPjP,YAAakP,EACVG,WAAW,UACXC,OAAOL,GACPM,OAAO,O,CAGd,MAAO,CACL5P,MAAOqP,EACPhP,YAAakP,EAAOG,WAAW,UAAUC,OAAON,GAAaO,OAAO,OAExE,IAOa,EAAAzQ,YAAe7G,IACnB,CACL8G,aAAc,GAAG9G,EAAIuX,cAAcvX,EAAID,IAAI,UAC3CyX,WAAY,GAAGxX,EAAIuX,cAAcvX,EAAID,IAAI,kB,uUCqD7C,SAAYQ,GACV,iBACA,0BACA,iBACA,eACA,mBACA,yCACA,mBACA,6BACA,mCACA,iCACA,mCACA,mBACA,wBACA,gCACA,2BACA,uBACA,cACA,oBACD,CAnBD,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAoBtB,SAAYkX,GACV,YACA,cACA,YACA,gBACA,iBACD,CAND,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAOvB,SAAYtX,GACV,iBACA,2BACA,6BACA,iCACA,mCACA,qCACA,+BACA,+BACA,iDACA,6BACA,uDACA,mCACA,mDACA,0CACD,CAfD,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAgBvB,SAAYuX,GACV,4BACA,sBACA,gBACA,8BACA,6BACD,CAND,CAAY,EAAAA,YAAA,EAAAA,UAAS,KAOrB,SAAYvH,GACV,eACD,CAFD,CAAY,EAAAA,eAAA,EAAAA,aAAY,KAGZ,EAAAsB,mBAAA,EAAAA,iBAAgB,IAChB,EAAAJ,YAAA,EAAAA,UAAS,IACT,EAAAF,WAAA,EAAAA,SAAQ,IACR,EAAAT,gBAAA,EAAAA,cAAa,IACb,EAAAvB,cAAA,EAAAA,YAAW,IACX,EAAAE,cAAA,EAAAA,YAAW,IACX,EAAAE,wBAAA,EAAAA,sBAAqB,IACrB,EAAAoI,qBAAA,EAAAA,mBAAkB,IAClB,EAAAC,wBAAA,EAAAA,sBAAqB,G,eC5NjCC,EAAOC,QAAUtM,QAAQ,W,sBCAzBqM,EAAOC,QAAUtM,QAAQ,gB,WCAzBqM,EAAOC,QAAUtM,QAAQ,O,aCAzBqM,EAAOC,QAAUtM,QAAQ,S,cCAzBqM,EAAOC,QAAUtM,QAAQ,U,+BCAzBqM,EAAOC,QAAUtM,QAAQ,yB,2BCAzBqM,EAAOC,QAAUtM,QAAQ,qB,aCAzBqM,EAAOC,QAAUtM,QAAQ,S,UCAzBqM,EAAOC,QAAUtM,QAAQ,M,mBCAzBqM,EAAOC,QAAUtM,QAAQ,e,eCAzBqM,EAAOC,QAAUtM,QAAQ,W,aCAzBqM,EAAOC,QAAUtM,QAAQ,S,iBCAzBqM,EAAOC,QAAUtM,QAAQ,a,YCAzBqM,EAAOC,QAAUtM,QAAQ,Q,WCAzBqM,EAAOC,QAAUtM,QAAQ,O,gBCAzBqM,EAAOC,QAAUtM,QAAQ,Y,kBCAzBqM,EAAOC,QAAUtM,QAAQ,Y,aCAzBqM,EAAOC,QAAUtM,QAAQ,S,WCAzBqM,EAAOC,QAAUtM,QAAQ,O,WCAzBqM,EAAOC,QAAUtM,QAAQ,O,GCCrBuM,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBhQ,IAAjBiQ,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,CAAC,GAOX,OAHAK,EAAoBF,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,OACf,C,wECnBA,qBACA,sBACA,uDAEA/O,QAAQqP,GAAG,qBAAsBvW,IAC/BO,QAAQiW,IACN,6CACA,KACAxW,EAAIa,KACJ,IACAb,EAAIjD,SAENmK,QAAQuP,KAAK,EAAE,IAIjB,MAAMC,EAAKxP,QAAQC,IAAIwP,uBAAuBhD,QAC5C,aACAzM,QAAQC,IAAIyP,gBAWd,UAASC,IAAI,eAAe,GAC5B,UACGC,QAAQJ,EAVqB,CAC9BK,WAAW,EACXC,YAAa,GACbC,yBAA0B,IAC1BC,gBAAiB,KACjBC,OAAQ,IAMPhE,MAAMiE,IACL7W,QAAQiW,IAAI,sBAAsB,IAEnCpD,OAAOpT,GAAQO,QAAQH,MAAMJ,EAAIa,KAAM,IAAKb,EAAIjD,QAAS,KAAMiD,KAElE,MAAMqX,EAAOnQ,QAAQC,IAAIkQ,MAAQ,KAC3BC,EAAS,UAAIC,OAAOF,GAAM,KAC9B9W,QAAQiW,IAAI,0BAA0Ba,OAAU,IAGlDnQ,QAAQqP,GAAG,sBAAuBvW,IAChCO,QAAQiW,IACN,8CACA,KACAxW,EAAIa,KACJ,IACAb,EAAIjD,SAENua,EAAOE,OAAM,KAEXtQ,QAAQuP,KAAK,EAAE,GACf,G","sources":["webpack://nursesrent/./packages/apps/nursesrent-api/src/app/index.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/booking.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/globalErrorHandler.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/handlerFactory.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/host.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/hostPayment.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/hostauth.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/index.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/nurse.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/nursePayment.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/nurseauth.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/property.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/controllers/review.controller.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/booking.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/host.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/hostPayment.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/index.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/nurse.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/nursePayment.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/property.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/review.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/models/subscription.model.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/booking.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/host.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/hostPayment.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/index.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/nurse.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/nursePayment.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/property.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/review.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/routes/subscription.routes.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/Email.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/apiFeatures.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/appError.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/catchAsync.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/constants.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/index.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/labels.ts","webpack://nursesrent/./packages/apps/nursesrent-api/src/utils/utilityFunctions.ts","webpack://nursesrent/./packages/libs/shared/src/index.ts","webpack://nursesrent/external commonjs \"bcryptjs\"","webpack://nursesrent/external commonjs \"cookie-parser\"","webpack://nursesrent/external commonjs \"cors\"","webpack://nursesrent/external commonjs \"dotenv\"","webpack://nursesrent/external commonjs \"express\"","webpack://nursesrent/external commonjs \"express-mongo-sanitize\"","webpack://nursesrent/external commonjs \"express-rate-limit\"","webpack://nursesrent/external commonjs \"helmet\"","webpack://nursesrent/external commonjs \"hpp\"","webpack://nursesrent/external commonjs \"jsonwebtoken\"","webpack://nursesrent/external commonjs \"mongoose\"","webpack://nursesrent/external commonjs \"morgan\"","webpack://nursesrent/external commonjs \"nodemailer\"","webpack://nursesrent/external commonjs \"tslib\"","webpack://nursesrent/external commonjs \"uuid\"","webpack://nursesrent/external commonjs \"validator\"","webpack://nursesrent/external commonjs \"xss-clean\"","webpack://nursesrent/external node-commonjs \"crypto\"","webpack://nursesrent/external node-commonjs \"path\"","webpack://nursesrent/external node-commonjs \"util\"","webpack://nursesrent/webpack/bootstrap","webpack://nursesrent/./packages/apps/nursesrent-api/src/main.ts"],"sourcesContent":["//core modules/////////////////////////////////////////////////////////\r\nimport * as path from 'path';\r\n\r\n//npm modules//////////////////////////////////////////////////////////\r\nimport * as express from 'express';\r\nimport * as logger from 'morgan';\r\nimport * as cors from 'cors';\r\nimport * as cookieParser from 'cookie-parser';\r\nimport * as hpp from 'hpp';\r\nimport * as mongoSanitize from 'express-mongo-sanitize';\r\nimport * as xss from 'xss-clean';\r\nimport rateLimit, { RateLimitRequestHandler } from 'express-rate-limit';\r\nimport helmet from 'helmet';\r\n\r\n// my modules//////////////////////////////////////////////////////////\r\nimport * as CONST from '../utils/constants';\r\nimport { eApiRoutes, eStatusCode } from '@nursesrent/libs/shared';\r\nimport { AppError } from '../utils/appError';\r\nimport { globalErrorHandler } from '../controllers';\r\n\r\n// routers//////////////////////////////////////////////////////////////\r\nimport { hostRouter, nurseRouter, propertyRouter } from '../routes';\r\n\r\n// init app/////////////////////////////////////////////////////////////\r\nconst app = express();\r\nconst limiter: RateLimitRequestHandler = rateLimit({\r\n  max: 100,\r\n  windowMs: 60 * 60 * 1000,\r\n  message: 'To many request from this IP, please try again in one hour!',\r\n});\r\n\r\n// middlewares///////////////////////////////////////////////////////////\r\napp.use(helmet()); // set security HTTP headers\r\nprocess.env.NODE_ENV === CONST.ENV.DEV && app.use(logger('dev'));\r\napp.use('/assets', express.static(path.join(__dirname, 'assets')));\r\n// app.set('view engine', 'ejs');\r\n// app.set('views', path.join(__dirname, '/assets/views'));\r\napp.use(cors({ origin: true, credentials: true }));\r\napp.use(`${CONST.API_ROUTE}`, limiter); // limit requests from the same api\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(mongoSanitize()); // Data sanitization againts NsSQL injection\r\napp.use(xss()); // Data sanitization againts XSS\r\napp.use(hpp()); // Prevent parameterr pollution\r\n\r\n// routes/////////////////////////////////////////////////////////////////\r\napp.get('/', (req, res) => {\r\n  res.status(eStatusCode.OK).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n    message: 'Welcome to nurses rent api',\r\n  });\r\n});\r\napp.get(eApiRoutes.BASE, (req, res) => {\r\n  res.status(eStatusCode.OK).json({\r\n    status: 'success',\r\n    data: 'welcome to nurses rent api',\r\n  });\r\n});\r\napp.use(`${eApiRoutes.BASE}/${eApiRoutes.PROPERTIES}`, propertyRouter);\r\napp.use(`${eApiRoutes.BASE}/${eApiRoutes.HOST}`, hostRouter);\r\napp.use(`${eApiRoutes.BASE}/${eApiRoutes.NURSE}`, nurseRouter);\r\n\r\napp.all('*', (req, res, next) => {\r\n  next(\r\n    new AppError(\r\n      `Can't find ${req.originalUrl} on this server!`,\r\n      eStatusCode.NOT_FOUND\r\n    )\r\n  );\r\n});\r\n// global error handler middleware\r\napp.use(globalErrorHandler);\r\n\r\nexport default app;\r\n","import { BookingDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport Booking, { IBookingDocument } from '../models/booking.model';\r\n\r\nconst create = handlerFactory.createOne<IBookingDocument, BookingDto>(Booking);\r\nconst getAll = handlerFactory.getAll<IBookingDocument, BookingDto>(Booking);\r\nconst getOne = handlerFactory.getOne<BookingDto>(Booking);\r\nconst updateOne = handlerFactory.updateOne<IBookingDocument, BookingDto>(\r\n  Booking\r\n);\r\nconst deleteOne = handlerFactory.deleteOne<IBookingDocument>(Booking);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","import { eStatusCode } from '@nursesrent/libs/shared';\r\nimport { AppError } from '../utils';\r\nimport * as CONST from '../utils';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst handleCastErrorDB = (err) => {\r\n  const message = `Invalid ${err.path}: ${err.value}.`;\r\n  return new AppError(message, eStatusCode.BAD_REQUEST);\r\n};\r\n\r\nconst handleDuplicateFieldsDB = (err) => {\r\n  const value = err.message.match(/([\"'])(\\\\?.)*?\\1/)[0];\r\n\r\n  const message = `Duplicate field value: ${value}. Please use another value!`;\r\n  return new AppError(message, eStatusCode.CONFLICT);\r\n};\r\n\r\nconst handleValidationErrorDB = (err: {\r\n  errors: { [s: string]: unknown } | ArrayLike<unknown>;\r\n}) => {\r\n  const errors = Object.values(err.errors).map((el: any) => el.message);\r\n\r\n  const message = `Invalid input data. ${errors.join('. ')}`;\r\n  return new AppError(message, eStatusCode.CONFLICT);\r\n};\r\n\r\nconst handleJWTError = () =>\r\n  new AppError('Invalid token. Please log in again!', eStatusCode.UNAUTHORIZED);\r\n\r\nconst handleJWTExpiredError = () =>\r\n  new AppError(\r\n    'Your token has expired! Please log in again.',\r\n    eStatusCode.UNAUTHORIZED\r\n  );\r\n\r\nconst sendErrorDev = (err: any, req: any, res: any) => {\r\n  const error = new AppError(err.message, err.statusCode);\r\n  // A) API\r\n  if (req.originalUrl.startsWith('/api')) {\r\n    return res.status(err.statusCode).json({\r\n      status: error.status,\r\n      error,\r\n      statusCode: err.statusCode,\r\n      message: error.message,\r\n      stack: error.stack,\r\n    });\r\n  }\r\n\r\n  // B) RENDERED WEBSITE\r\n  console.error('ERROR 💥', err);\r\n  return res.status(err.statusCode).render('error', {\r\n    title: 'Something went very wrong!',\r\n    statusCode: err.statusCode,\r\n    msg: err.message,\r\n  });\r\n};\r\n\r\nconst sendErrorProd = (err: any, req: any, res: any) => {\r\n  // A) API\r\n  if (req.originalUrl.startsWith('/api')) {\r\n    // A) Operational, trusted error: send message to client\r\n    if (err.isOperational) {\r\n      return res.status(err.statusCode).json({\r\n        status: err.status,\r\n        statusCode: err.statusCode,\r\n        message: err.message,\r\n      });\r\n    }\r\n    // B) Programming or other unknown error: don't leak error details\r\n    // 1) Log error\r\n    console.error('ERROR 💥', err);\r\n    // 2) Send generic message\r\n    return res.status(eStatusCode.INTERNAL_SERVER_ERROR).json({\r\n      status: 'error',\r\n      statusCode: eStatusCode.INTERNAL_SERVER_ERROR,\r\n      message: 'Something went very wrong!',\r\n    });\r\n  }\r\n\r\n  // B) Programming or other unknown error: don't leak error details\r\n  // 1) Log error\r\n  console.error('ERROR 💥', err);\r\n  // 2) Send generic message\r\n  return res.status(err.statusCode).render('error', {\r\n    title: 'Something went very wrong!',\r\n    statusCode: err.statusCode,\r\n    msg: 'Please try again later.',\r\n  });\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport const globalErrorHandler = (\r\n  err: any,\r\n  req: any,\r\n  res: any,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  next: any\r\n) => {\r\n  err.statusCode = err.statusCode || eStatusCode.INTERNAL_SERVER_ERROR;\r\n  err.status = err.status || CONST.STATUS.ERROR;\r\n\r\n  if (process.env.NODE_ENV === CONST.ENV.DEV) {\r\n    sendErrorDev(err, req, res);\r\n  } else if (process.env.NODE_ENV === CONST.ENV.PROD) {\r\n    let error = { ...err };\r\n    error.message = err.message;\r\n    error.name = err.name;\r\n    if (error.name === CONST.ERRORTYPES.CASTERROR)\r\n      error = handleCastErrorDB(error);\r\n    if (error.code === CONST.ERRORTYPES.DUBLICATEFIELDERROR)\r\n      error = handleDuplicateFieldsDB(error);\r\n    if (error.name === CONST.ERRORTYPES.VALIDATIONERROR)\r\n      error = handleValidationErrorDB(error);\r\n    if (error.name === CONST.ERRORTYPES.JSONWEBTOKENERROR)\r\n      error = handleJWTError();\r\n    if (error.name === CONST.ERRORTYPES.TOKENEXPIREDERROR)\r\n      error = handleJWTExpiredError();\r\n\r\n    sendErrorProd(error, req, res);\r\n  }\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { eStatusCode } from '@nursesrent/libs/shared';\r\nimport { Model } from 'mongoose';\r\nimport { ApiFeatures, AppError, catchAsync, checkId } from '../utils';\r\nimport * as CONST from '../utils';\r\nimport * as LABELS from '../utils';\r\n\r\n/**\r\n *\r\n * @param  Model Mongoose model\r\n * @returns 204 noc content status code and no data\r\n */\r\nconst deleteOne = <T = any>(Model: Model<T>) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const { id } = req.params;\r\n    checkId(id, next);\r\n\r\n    const doc = await Model.findByIdAndDelete(id);\r\n\r\n    if (!doc) {\r\n      return next(new AppError(LABELS.NO_DOC_FOUND, eStatusCode.NOT_FOUND));\r\n    }\r\n\r\n    res.status(eStatusCode.NO_CONTENT).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      data: null,\r\n    });\r\n  });\r\n\r\n/**\r\n *\r\n * @param  Model Mongoose model\r\n * @returns 200 Ok status code and updated data\r\n */\r\nconst updateOne = <T = any, Dto = any>(Model: Model<T>) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const { id } = req.params;\r\n    checkId(id, next);\r\n\r\n    const doc: Dto = await Model.findByIdAndUpdate(id, req.body, {\r\n      new: true,\r\n      runValidators: true,\r\n    });\r\n\r\n    if (!doc) {\r\n      return next(new AppError(LABELS.NO_DOC_FOUND, eStatusCode.NOT_FOUND));\r\n    }\r\n\r\n    res.status(eStatusCode.OK).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      data: doc,\r\n    });\r\n  });\r\n\r\n/**\r\n *\r\n * @param Model Mongoose model\r\n * @returns 201 created ststus code and created data\r\n */\r\nconst createOne = <T = any, Dto = any>(Model: Model<T>) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const doc = (await Model.create(req.body)) as Dto;\r\n\r\n    res.status(eStatusCode.CREATED).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      data: doc,\r\n    });\r\n  });\r\n\r\n/**\r\n *\r\n * @param Model Mongoose model\r\n * @param popOptions population options\r\n * @returns 200 ok status code and founded data\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst getOne = <Dto = any>(Model: Model<any>, popOptions?: any) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const { id } = req.params;\r\n    checkId(id, next);\r\n\r\n    let query = Model.findById(id);\r\n    if (popOptions) query = query.populate(popOptions);\r\n    const doc: Dto = await query;\r\n\r\n    if (!doc) {\r\n      return next(new AppError(LABELS.NO_DOC_FOUND, eStatusCode.NOT_FOUND));\r\n    }\r\n\r\n    res.status(eStatusCode.OK).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      data: doc,\r\n    });\r\n  });\r\n\r\n/**\r\n *\r\n * @param Model Mongoose model\r\n * @returns 200 ok status code and all the queried data\r\n */\r\nconst getAll = <T = any, Dto = any>(Model: Model<T>) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const features = new ApiFeatures(Model.find(), req.query)\r\n      .filter()\r\n      .sort()\r\n      .limitFields()\r\n      .paginate();\r\n    const doc: Dto[] = await features.query;\r\n\r\n    // SEND RESPONSE\r\n    res.status(eStatusCode.OK).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      results: doc.length,\r\n      data: doc,\r\n    });\r\n  });\r\n\r\nconst handlerFactory = {\r\n  getAll,\r\n  getOne,\r\n  createOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n\r\nexport default handlerFactory;\r\n","import { HostDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport Host, { IHostDocument } from '../models/host.model';\r\n\r\nconst create = handlerFactory.createOne<IHostDocument, HostDto>(Host);\r\nconst getAll = handlerFactory.getAll<IHostDocument, HostDto>(Host);\r\nconst getOne = handlerFactory.getOne<HostDto>(Host);\r\nconst updateOne = handlerFactory.updateOne<IHostDocument, HostDto>(Host);\r\nconst deleteOne = handlerFactory.deleteOne<IHostDocument>(Host);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","import { HostPaymentDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport HostPayment, { IHostPaymentDocument } from '../models/hostPayment.model';\r\n\r\nconst create = handlerFactory.createOne<IHostPaymentDocument, HostPaymentDto>(\r\n  HostPayment\r\n);\r\nconst getAll = handlerFactory.getAll<IHostPaymentDocument, HostPaymentDto>(\r\n  HostPayment\r\n);\r\nconst getOne = handlerFactory.getOne<HostPaymentDto>(HostPayment);\r\nconst updateOne = handlerFactory.updateOne<\r\n  IHostPaymentDocument,\r\n  HostPaymentDto\r\n>(HostPayment);\r\nconst deleteOne = handlerFactory.deleteOne<IHostPaymentDocument>(HostPayment);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { CreateHostDto, eStatusCode } from '@nursesrent/libs/shared';\r\nimport { promisify } from 'util';\r\nimport { Host } from '../models';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport {\r\n  AppError,\r\n  catchAsync,\r\n  Email,\r\n  generateUrl,\r\n  sendUserTokenSuccess,\r\n  signOrEncryptTokens,\r\n} from '../utils';\r\nimport * as CONST from '../utils';\r\n\r\nconst signup = catchAsync(async (req, res, next) => {\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    phone,\r\n    email,\r\n    password,\r\n    passwordConfirm,\r\n    dlNumber,\r\n    expirationDate,\r\n    state,\r\n  } = req.body as CreateHostDto;\r\n\r\n  const userData: CreateHostDto = {\r\n    firstName,\r\n    lastName,\r\n    phone,\r\n    email,\r\n    password,\r\n    passwordConfirm,\r\n    dlNumber,\r\n    expirationDate,\r\n    state,\r\n  };\r\n  // create the user\r\n  const createdUser = new Host(userData);\r\n  const user = await createdUser.save();\r\n\r\n  if (user) {\r\n    // send welcome email\r\n    const isSuccess = await new Email(\r\n      userData,\r\n      generateUrl(req).baseFrontUrl,\r\n      'Currently we cannot create an account, please try again latter!',\r\n      next\r\n    ).sendWelcome();\r\n    if (!isSuccess) {\r\n      await Host.findByIdAndDelete(createdUser.id);\r\n    } else {\r\n      isSuccess && sendUserTokenSuccess(createdUser, res, eStatusCode.CREATED);\r\n    }\r\n  }\r\n});\r\n\r\nconst sendVerifyAccountEmail = catchAsync(async (req, res, next) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const { user } = req as any;\r\n\r\n  if (user.isverified) {\r\n    return next(\r\n      new AppError('Users e-mail is not verified!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const verificationToken = await user.createverifyToken();\r\n  const baseUrl = generateUrl(req);\r\n  const isSuccess = await new Email(\r\n    user,\r\n    `${baseUrl.baseFrontUrl}/host/verify/${verificationToken}`,\r\n    'E-mail sent failed, please try again latter!',\r\n    next\r\n  ).sendEmailVerification();\r\n\r\n  if (isSuccess) {\r\n    await user.save({ validateBeforeSave: false });\r\n    if (process.env.NODE_ENV === CONST.ENV.DEV && !user.isverified) {\r\n      return res.status(eStatusCode.OK).json({\r\n        status: CONST.STATUS.SUCCESS,\r\n        message:\r\n          'We have sent an e-mail with instructions on how to verufy your email account.',\r\n      });\r\n    }\r\n    res.status(eStatusCode.OK).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      message:\r\n        'We have sent an e-mail with instructions on how to verufy your email account.',\r\n    });\r\n  }\r\n});\r\n\r\nconst verify = catchAsync(async (req, res, next) => {\r\n  const { token } = req.params;\r\n\r\n  const encryptedToken = await signOrEncryptTokens(token);\r\n\r\n  const host: any = await Host.findOne({\r\n    verificationToken: encryptedToken.hashedToken,\r\n  });\r\n\r\n  if (!host) {\r\n    return next(\r\n      new AppError(\r\n        'Verification failed, please try again!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  if (host.isVerified) {\r\n    return next(new AppError('This host is verified', eStatusCode.CONFLICT));\r\n  }\r\n\r\n  host.verificationToken = undefined;\r\n  host.isVerified = true;\r\n  await host.save({ validateBeforeSave: false });\r\n\r\n  res.status(eStatusCode.OK).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n    message: 'Host verified successfuly!',\r\n  });\r\n});\r\n\r\nconst signin = catchAsync(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return next(\r\n      new AppError(\r\n        'Please enter your e-mail or password!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n\r\n  const host = await Host.findOne({ email }).select('+password');\r\n  if (!host) {\r\n    return next(\r\n      new AppError(\r\n        'E-mail or password is not correct!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n  if (!(await host.schema.methods.checkPassword(password, host.password))) {\r\n    return next(\r\n      new AppError(\r\n        'E-mail or password is not correct!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n\r\n  sendUserTokenSuccess(host, res);\r\n});\r\n\r\nconst logOut = (_req, res) => {\r\n  res.cookie('jwt', 'loggedout', {\r\n    expires: new Date(Date.now() + 10 * 1000),\r\n    httpOnly: true,\r\n  });\r\n  res.status(eStatusCode.OK).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n  });\r\n};\r\n\r\n// protect routes controller\r\nconst protect = catchAsync(async (req: any, res, next) => {\r\n  let token = '';\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith('Bearer')\r\n  ) {\r\n    token = req.headers.authorization.split(' ')[1];\r\n  }\r\n  if (req.cookies && req.cookies.jwt) {\r\n    token = req.cookies.jwt;\r\n  }\r\n\r\n  if (!token) {\r\n    return next(\r\n      new AppError(\r\n        'You are not logged in, please log in!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  const decodedToken: any = await promisify(jwt.verify as any)(\r\n    token,\r\n    process.env.JWT_SECRET_KEY\r\n  );\r\n\r\n  const freshHost = await Host.findById(decodedToken.id);\r\n  if (!freshHost) {\r\n    return next(\r\n      new AppError(\r\n        'This token has expired, please login again!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  if (freshHost.passwordChangetAfter(decodedToken.iat)) {\r\n    return next(\r\n      new AppError(\r\n        'This host has changed the password lattely, please login again with the new password!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  req.user = freshHost;\r\n  next();\r\n});\r\n\r\n// password reset functionality\r\nconst forgotPassword = catchAsync(async (req, res, next) => {\r\n  const host = await Host.findOne({ email: req.body.email });\r\n  if (!host) {\r\n    return next(\r\n      new AppError(\r\n        'Host with this email does not exists!',\r\n        eStatusCode.NOT_FOUND\r\n      )\r\n    );\r\n  }\r\n\r\n  if (host.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const passwordResetToken = await host.createPasswordResetToken();\r\n  const baseUrl = generateUrl(req);\r\n\r\n  try {\r\n    const isSuccess = await new Email(\r\n      host,\r\n      `${baseUrl.baseFrontUrl}/host/changepassword/${passwordResetToken}`,\r\n      'Failed to sent e-mail, please try again latter!',\r\n      next\r\n    ).sendPasswordReset();\r\n    if (isSuccess) {\r\n      await host.save({ validateBeforeSave: false });\r\n      if (process.env.NODE_ENV === CONST.ENV.DEV) {\r\n        return res.status(eStatusCode.OK).json({\r\n          status: CONST.STATUS.SUCCESS,\r\n          message:\r\n            'We have sent an email with instructions on how to change your password.',\r\n        });\r\n      }\r\n\r\n      res.status(eStatusCode.OK).json({\r\n        status: CONST.STATUS.SUCCESS,\r\n        message:\r\n          'We have sent an email with instructions on how to change your password.',\r\n      });\r\n    }\r\n  } catch (err) {\r\n    host.passwordResetToken = undefined;\r\n    host.passwordResetExpires = undefined;\r\n    await host.save({ validateBeforeSave: false });\r\n    return next(\r\n      new AppError(\r\n        'Failed to sent e-mail, please try again latter!',\r\n        eStatusCode.INTERNAL_SERVER_ERROR\r\n      )\r\n    );\r\n  }\r\n});\r\n\r\nconst resetPassword = catchAsync(async (req, res, next) => {\r\n  const token = await signOrEncryptTokens(req.params.token);\r\n\r\n  const host = await Host.findOne({\r\n    passwordResetToken: token.hashedToken,\r\n    passwordResetExpires: { $gt: Date.now() },\r\n  });\r\n\r\n  if (!host) {\r\n    return next(new AppError('Token is expired!', eStatusCode.BAD_REQUEST));\r\n  }\r\n\r\n  if (host.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  host.password = req.body.password;\r\n  host.passwordConfirm = req.body.passwordConfirm;\r\n  host.passwordResetExpires = undefined;\r\n  host.passwordResetToken = undefined;\r\n  await host.save();\r\n\r\n  sendUserTokenSuccess(host, res);\r\n});\r\n\r\n// update password even if the user has not forget it\r\nconst updatepassword = catchAsync(async (req: any, res, next) => {\r\n  const host = await Host.findById(req.user.id).select('+password');\r\n\r\n  if (host.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const { password, passwordConfirm } = req.body;\r\n\r\n  if (!host.checkPassword(passwordConfirm, host.password)) {\r\n    return next(new AppError('Incorrect password!', eStatusCode.BAD_REQUEST));\r\n  }\r\n\r\n  host.password = password;\r\n  host.passwordConfirm = passwordConfirm;\r\n  await host.save();\r\n\r\n  sendUserTokenSuccess(host, res);\r\n});\r\n\r\n// refresh user token\r\nconst refresh = catchAsync(async (req: any, res, next) => {\r\n  if (!req.user || !req.user.refreshToken) {\r\n    return next(\r\n      new AppError(\r\n        'You are not logged in, please login!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n  const freshHost = await Host.findOne({ refreshToken: req.user.refreshToken });\r\n  await freshHost.save({ validateBeforeSave: false });\r\n\r\n  if (!freshHost) {\r\n    return next(new AppError('You are not logged in, please login!', 401));\r\n  }\r\n\r\n  sendUserTokenSuccess(freshHost, res);\r\n});\r\n\r\nexport const hostauth = {\r\n  signup,\r\n  sendVerifyAccountEmail,\r\n  verify,\r\n  signin,\r\n  logOut,\r\n  protect,\r\n  forgotPassword,\r\n  resetPassword,\r\n  updatepassword,\r\n  refresh,\r\n};\r\n","export { default as handlerFactory } from './handlerFactory';\r\nexport * from './globalErrorHandler';\r\nexport * from './property.controller';\r\nexport * from './hostauth.controller';\r\nexport * from './nurseauth.controller';\r\nexport * from './host.controller';\r\nexport * from './nurse.controller';\r\nexport * from './booking.controller';\r\nexport * from './review.controller';\r\nexport * from './hostPayment.controller';\r\nexport * from './nursePayment.controller';\r\n","import { NurseDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport Nurse, { INurseDocument } from '../models/nurse.model';\r\n\r\nconst create = handlerFactory.createOne<INurseDocument, NurseDto>(Nurse);\r\nconst getAll = handlerFactory.getAll<INurseDocument, NurseDto>(Nurse);\r\nconst getOne = handlerFactory.getOne<NurseDto>(Nurse);\r\nconst updateOne = handlerFactory.updateOne<INurseDocument, NurseDto>(Nurse);\r\nconst deleteOne = handlerFactory.deleteOne<INurseDocument>(Nurse);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","import { NursePaymentDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport { NursePayment } from '../models';\r\nimport { INursePaymentDocument } from '../models/nursePayment.model';\r\n\r\nconst create = handlerFactory.createOne<INursePaymentDocument, NursePaymentDto>(\r\n  NursePayment\r\n);\r\nconst getAll = handlerFactory.getAll<INursePaymentDocument, NursePaymentDto>(\r\n  NursePayment\r\n);\r\nconst getOne = handlerFactory.getOne<NursePaymentDto>(NursePayment);\r\nconst updateOne = handlerFactory.updateOne<\r\n  INursePaymentDocument,\r\n  NursePaymentDto\r\n>(NursePayment);\r\nconst deleteOne = handlerFactory.deleteOne<INursePaymentDocument>(NursePayment);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { CreateNurseDto, eStatusCode } from '@nursesrent/libs/shared';\r\nimport { promisify } from 'util';\r\nimport { Nurse } from '../models';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport {\r\n  AppError,\r\n  catchAsync,\r\n  Email,\r\n  generateUrl,\r\n  sendUserTokenSuccess,\r\n  signOrEncryptTokens,\r\n} from '../utils';\r\nimport * as CONST from '../utils';\r\n\r\nconst signup = catchAsync(async (req, res, next) => {\r\n  const {\r\n    displayName,\r\n    email,\r\n    dateOfBirth,\r\n    licenceNumber,\r\n    licenceType,\r\n    password,\r\n    passwordConfirm,\r\n    phone,\r\n    state,\r\n  } = req.body as CreateNurseDto;\r\n\r\n  const userData = {\r\n    displayName,\r\n    email,\r\n    dateOfBirth,\r\n    phone,\r\n    state,\r\n    licenceNumber,\r\n    licenceType,\r\n    password,\r\n    passwordConfirm,\r\n  };\r\n\r\n  // create the user\r\n  const createdUser = new Nurse(userData);\r\n  const user = await createdUser.save();\r\n\r\n  if (user) {\r\n    // send welcome email\r\n    const isSuccess = await new Email(\r\n      userData,\r\n      generateUrl(req).baseFrontUrl,\r\n      'Currently we cannot create an account, please try again latter!',\r\n      next\r\n    ).sendWelcome();\r\n    if (!isSuccess) {\r\n      await Nurse.findByIdAndDelete(createdUser.id);\r\n    } else {\r\n      isSuccess && sendUserTokenSuccess(createdUser, res, eStatusCode.CREATED);\r\n    }\r\n  }\r\n});\r\n\r\nconst sendVerifyAccountEmail = catchAsync(async (req, res, next) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const { user } = req as any;\r\n\r\n  if (user.isVerified) {\r\n    return next(\r\n      new AppError('Users e-mail is not verified!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const verificationToken = await user.createverifyToken();\r\n  const baseUrl = generateUrl(req);\r\n  const isSuccess = await new Email(\r\n    user,\r\n    `${baseUrl.baseFrontUrl}/nurse/verify/${verificationToken}`,\r\n    'E-mail sent failed, please try again latter!',\r\n    next\r\n  ).sendEmailVerification();\r\n\r\n  if (isSuccess) {\r\n    await user.save({ validateBeforeSave: false });\r\n    if (process.env.NODE_ENV === CONST.ENV.DEV && !user.isVerified) {\r\n      return res.status(eStatusCode.OK).json({\r\n        status: CONST.STATUS.SUCCESS,\r\n        message:\r\n          'We have sent an e-mail with instructions on how to verufy your email account.',\r\n      });\r\n    }\r\n    res.status(eStatusCode.OK).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      message:\r\n        'We have sent an e-mail with instructions on how to verufy your email account.',\r\n    });\r\n  }\r\n});\r\n\r\nconst verify = catchAsync(async (req, res, next) => {\r\n  const { token } = req.params;\r\n\r\n  const encryptedToken = await signOrEncryptTokens(token);\r\n\r\n  const nurse: any = await Nurse.findOne({\r\n    verificationToken: encryptedToken.hashedToken,\r\n  });\r\n\r\n  if (!nurse) {\r\n    return next(\r\n      new AppError(\r\n        'Verification failed, please try again!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  if (nurse.isVerified) {\r\n    return next(new AppError('This nurse is verified.', eStatusCode.CONFLICT));\r\n  }\r\n\r\n  nurse.verificationToken = undefined;\r\n  nurse.isVerified = true;\r\n  await nurse.save({ validateBeforeSave: false });\r\n\r\n  res.status(eStatusCode.OK).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n    message: 'Nurse verified successfuly!',\r\n  });\r\n});\r\n\r\nconst signin = catchAsync(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return next(\r\n      new AppError(\r\n        'Please enter your e-mail or password!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n\r\n  const nurse = await Nurse.findOne({ email }).select('+password');\r\n  if (!nurse) {\r\n    return next(\r\n      new AppError(\r\n        'E-mail or password is not correct!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n  if (!(await nurse.schema.methods.checkPassword(password, nurse.password))) {\r\n    return next(\r\n      new AppError(\r\n        'E-mail or password is not correct!',\r\n        eStatusCode.BAD_REQUEST\r\n      )\r\n    );\r\n  }\r\n  sendUserTokenSuccess(nurse, res);\r\n});\r\n\r\nconst logOut = (_req, res) => {\r\n  res.cookie('jwt', 'loggedout', {\r\n    expires: new Date(Date.now() + 10 * 1000),\r\n    httpOnly: true,\r\n  });\r\n  res.status(eStatusCode.OK).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n  });\r\n};\r\n\r\n// protect routes controller\r\nconst protect = catchAsync(async (req: any, res, next) => {\r\n  let token = '';\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith('Bearer')\r\n  ) {\r\n    token = req.headers.authorization.split(' ')[1];\r\n  }\r\n  if (req.cookies && req.cookies.jwt) {\r\n    token = req.cookies.jwt;\r\n  }\r\n\r\n  if (!token) {\r\n    return next(\r\n      new AppError(\r\n        'You are not logged in, please log in!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  const decodedToken: any = await promisify(jwt.verify as any)(\r\n    token,\r\n    process.env.JWT_SECRET_KEY\r\n  );\r\n\r\n  const freshNurse: any = await Nurse.findById(decodedToken.id);\r\n  if (!freshNurse) {\r\n    return next(\r\n      new AppError(\r\n        'This token has expired, please login again!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  if (freshNurse.passwordChangetAfter(decodedToken.iat)) {\r\n    return next(\r\n      new AppError(\r\n        'This nurset has changed the password lattely, please login again with the new password!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n\r\n  req.user = freshNurse;\r\n  next();\r\n});\r\n\r\n// password reset functionality\r\nconst forgotPassword = catchAsync(async (req, res, next) => {\r\n  const nurse: any = await Nurse.findOne({ email: req.body.email });\r\n  if (!nurse) {\r\n    return next(\r\n      new AppError(\r\n        'Nurse with this email does not exists!',\r\n        eStatusCode.NOT_FOUND\r\n      )\r\n    );\r\n  }\r\n\r\n  if (nurse.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const passwordResetToken = await nurse.createPasswordResetToken();\r\n  const baseUrl = generateUrl(req);\r\n\r\n  try {\r\n    const isSuccess = await new Email(\r\n      nurse,\r\n      `${baseUrl.baseFrontUrl}/nurse/changepassword/${passwordResetToken}`,\r\n      'Failed to sent e-mail, please try again latter!',\r\n      next\r\n    ).sendPasswordReset();\r\n    if (isSuccess) {\r\n      await nurse.save({ validateBeforeSave: false });\r\n      if (process.env.NODE_ENV === CONST.ENV.DEV) {\r\n        return res.status(eStatusCode.OK).json({\r\n          status: CONST.STATUS.SUCCESS,\r\n          message:\r\n            'We have sent an email with instructions on how to change your password.',\r\n        });\r\n      }\r\n\r\n      res.status(eStatusCode.OK).json({\r\n        status: CONST.STATUS.SUCCESS,\r\n        message:\r\n          'We have sent an email with instructions on how to change your password.',\r\n      });\r\n    }\r\n  } catch (err) {\r\n    nurse.passwordResetToken = undefined;\r\n    nurse.passwordResetExpires = undefined;\r\n    await nurse.save({ validateBeforeSave: false });\r\n    return next(\r\n      new AppError(\r\n        'Failed to sent e-mail, please try again latter!',\r\n        eStatusCode.INTERNAL_SERVER_ERROR\r\n      )\r\n    );\r\n  }\r\n});\r\n\r\nconst resetPassword = catchAsync(async (req, res, next) => {\r\n  const token = await signOrEncryptTokens(req.params.token);\r\n\r\n  const nurse = await Nurse.findOne({\r\n    passwordResetToken: token.hashedToken,\r\n    passwordResetExpires: { $gt: Date.now() },\r\n  });\r\n\r\n  if (!nurse) {\r\n    return next(new AppError('Token is expired!', eStatusCode.BAD_REQUEST));\r\n  }\r\n\r\n  if (nurse.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  nurse.password = req.body.password;\r\n  nurse.passwordConfirm = req.body.passwordConfirm;\r\n  nurse.passwordResetExpires = undefined;\r\n  nurse.passwordResetToken = undefined;\r\n  await nurse.save();\r\n\r\n  sendUserTokenSuccess(nurse, res);\r\n});\r\n\r\n// update password even if the user has not forget it\r\nconst updatepassword = catchAsync(async (req: any, res, next) => {\r\n  const nurse: any = await Nurse.findById(req.user.id).select('+password');\r\n\r\n  if (nurse.isVerified === false) {\r\n    return next(\r\n      new AppError('Please verify your account!', eStatusCode.UNAUTHORIZED)\r\n    );\r\n  }\r\n\r\n  const { password, passwordConfirm } = req.body;\r\n\r\n  if (!nurse.checkPassword(passwordConfirm, nurse.password)) {\r\n    return next(new AppError('Incorrect password!', eStatusCode.BAD_REQUEST));\r\n  }\r\n\r\n  nurse.password = password;\r\n  nurse.passwordConfirm = passwordConfirm;\r\n  await nurse.save();\r\n\r\n  sendUserTokenSuccess(nurse, res);\r\n});\r\n\r\n// refresh user token\r\nconst refresh = catchAsync(async (req: any, res, next) => {\r\n  if (!req.user) {\r\n    return next(\r\n      new AppError(\r\n        'You are not logged in, please login!',\r\n        eStatusCode.UNAUTHORIZED\r\n      )\r\n    );\r\n  }\r\n  const freshNurse = await Nurse.findById(req.user.id);\r\n  freshNurse.save({ validateBeforeSave: false });\r\n\r\n  if (!freshNurse) {\r\n    return next(new AppError('You are not logged in, please login!', 401));\r\n  }\r\n\r\n  sendUserTokenSuccess(freshNurse, res);\r\n});\r\n\r\nexport const nurseauth = {\r\n  signup,\r\n  sendVerifyAccountEmail,\r\n  verify,\r\n  signin,\r\n  logOut,\r\n  protect,\r\n  forgotPassword,\r\n  resetPassword,\r\n  updatepassword,\r\n  refresh,\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { PropertyDto } from '@nursesrent/libs/shared';\r\nimport { Property } from '../models';\r\nimport { handlerFactory } from '.';\r\n\r\nconst create = handlerFactory.createOne<any, PropertyDto>(Property);\r\nconst getAll = handlerFactory.getAll<any, PropertyDto>(Property);\r\nconst getOne = handlerFactory.getOne<PropertyDto>(Property);\r\nconst updateOne = handlerFactory.updateOne<any, PropertyDto>(Property);\r\nconst deleteOne = handlerFactory.deleteOne<any>(Property);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","import { ReviewDto } from '@nursesrent/libs/shared';\r\nimport { handlerFactory } from '.';\r\nimport { Review } from '../models';\r\nimport { IReviewDocument } from '../models/review.model';\r\n\r\nconst create = handlerFactory.createOne<IReviewDocument, ReviewDto>(Review);\r\nconst getAll = handlerFactory.getAll<IReviewDocument, ReviewDto>(Review);\r\nconst getOne = handlerFactory.getOne<ReviewDto>(Review);\r\nconst updateOne = handlerFactory.updateOne<IReviewDocument, ReviewDto>(Review);\r\nconst deleteOne = handlerFactory.deleteOne<IReviewDocument>(Review);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  getOne,\r\n  updateOne,\r\n  deleteOne,\r\n};\r\n","import mongoose, { Schema, Document, Model } from 'mongoose';\r\n\r\nexport interface IBookingDocument extends Document {\r\n  price: number;\r\n  createdAt?: Date;\r\n  bookingDuration: number;\r\n  paid?: boolean;\r\n  nurse: Schema.Types.ObjectId;\r\n  property: Schema.Types.ObjectId;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface IBookingModel extends Model<IBookingDocument> {}\r\n\r\nconst bookingSchema: Schema = new Schema<IBookingDocument>(\r\n  {\r\n    price: {\r\n      type: Number,\r\n      require: [true, 'Booking must have a price!'],\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    bookingDuration: {\r\n      type: Number,\r\n      required: [true, 'Booking must have a duration!'],\r\n    },\r\n    paid: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    // relations\r\n    nurse: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'Nurse',\r\n      required: [true, 'A booking must have been made by a nurse!'],\r\n    },\r\n    property: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'Property',\r\n      required: [true, 'A property should be booked!'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Booking = mongoose.model<IBookingDocument, IBookingModel>(\r\n  'Booking',\r\n  bookingSchema\r\n);\r\nexport default Booking;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport mongoose, { Schema, Document, Model } from 'mongoose';\r\nimport validator from 'validator';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { signOrEncryptTokens } from '../utils';\r\n\r\nexport interface IHostDocument extends Document {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  dlNumber: number;\r\n  expirationDate: Date;\r\n  state: string;\r\n  isVerified?: boolean;\r\n  isActive?: boolean;\r\n  createdAt?: Date;\r\n  disabled?: boolean;\r\n  responseTime?: string;\r\n  numberOfReports?: number;\r\n  responseRate?: string;\r\n  profilPicture?: string;\r\n  passwordResetToken?: string;\r\n  verificationToken?: string;\r\n  passwordChangetAt?: Date;\r\n  passwordResetExpires?: Date;\r\n  refreshToken?: string;\r\n  subscription?: Schema.Types.ObjectId;\r\n  properties?: Schema.Types.ObjectId[];\r\n  payments?: Schema.Types.ObjectId[];\r\n  passwordChangetAfter: (JwtTimestamp: number) => boolean;\r\n  createPasswordResetToken: () => string;\r\n  checkPassword: (\r\n    candidatePassword: string,\r\n    password: string\r\n  ) => Promise<boolean>;\r\n}\r\n\r\nexport interface IHostModel extends Model<IHostDocument> {\r\n  checkPassword: (\r\n    candidatePassword: string,\r\n    password: string\r\n  ) => Promise<boolean>;\r\n}\r\n\r\nconst hostSchema: Schema = new Schema<IHostDocument>(\r\n  {\r\n    firstName: {\r\n      type: String,\r\n      required: [true, 'Please enter your first name.'],\r\n      trim: true,\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, 'Please enter your last name.'],\r\n      trim: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'An email address is required.'],\r\n      unique: true,\r\n      lowercase: true,\r\n      validate: [validator.isEmail, 'Please eneter a valid email address.'],\r\n    },\r\n    phone: {\r\n      type: String,\r\n      required: [true, 'A phone number is reuired.'],\r\n      validate: [\r\n        validator.isMobilePhone,\r\n        'Please eneter a valid phone number.',\r\n      ],\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, 'Please enter your password.'],\r\n      minlength: [8, 'Password should be at least 8 characters long.'],\r\n      select: false,\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      required: [true, 'Please confirn your password.'],\r\n      validate: {\r\n        validator: function (passwordConfirm) {\r\n          return passwordConfirm === this.password;\r\n        },\r\n        message: 'Passwords are not the same.',\r\n      },\r\n    },\r\n    dlNumber: {\r\n      type: Number,\r\n      required: [true, 'Please enter the DL number.'],\r\n    },\r\n    expirationDate: {\r\n      type: Date,\r\n      required: [true, 'Please enter the expiration number.'],\r\n    },\r\n    state: {\r\n      type: String,\r\n      required: [true, 'Please specify the state.'],\r\n    },\r\n    isVerified: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    isActive: {\r\n      type: Boolean,\r\n      default: true,\r\n      select: false,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    responseTime: String,\r\n    numberOfReports: Number,\r\n    responseRate: String,\r\n    profilPicture: String,\r\n    passwordResetToken: String,\r\n    verificationToken: String,\r\n    passwordChangetAt: Date,\r\n    passwordResetExpires: Date,\r\n    refreshToken: String,\r\n    // relations\r\n    subscription: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'Subscription',\r\n    },\r\n    properties: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Property',\r\n      },\r\n    ],\r\n    payments: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'HostPayment',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\n// pre save middlewaree for changing passwordChangetAt field to the date where password is changed\r\nhostSchema.pre('save', function (next) {\r\n  if (!this.isModified('password') || this.isNew) return next();\r\n\r\n  this.passwordChangetAt = (Date.now() - 1000) as any;\r\n  next();\r\n});\r\n\r\n// pre save middleware for hashing and persisting the hashed password to the database\r\nhostSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n\r\n  const password = await bcrypt.hash(this.password, 12);\r\n  this.password = password;\r\n  this.passwordConfirm = undefined;\r\n\r\n  next();\r\n});\r\n\r\nhostSchema.pre('save', async function (next) {\r\n  const token: string = uuidv4();\r\n  const refreshToken = await bcrypt.hash(token, 8);\r\n  this.refreshToken = refreshToken;\r\n\r\n  next();\r\n});\r\n\r\nhostSchema.methods.checkPassword = async function (\r\n  candidatePassword: string,\r\n  password: string\r\n) {\r\n  return bcrypt.compareSync(candidatePassword, password);\r\n};\r\n\r\nhostSchema.methods.passwordChangetAfter = function (JwtTimestamp: number) {\r\n  if (this.passwordChangetAt) {\r\n    const changedTimestamp = parseInt(\r\n      (this.passwordChangetAt.getTime() / 1000) as any,\r\n      10\r\n    );\r\n    return JwtTimestamp < changedTimestamp;\r\n  }\r\n  return false;\r\n};\r\n\r\nhostSchema.methods.createPasswordResetToken = async function () {\r\n  const resetToken = await signOrEncryptTokens();\r\n\r\n  this.passwordResetToken = resetToken.hashedToken;\r\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\r\n\r\n  return resetToken.token;\r\n};\r\n\r\nhostSchema.methods.createverifyToken = async function () {\r\n  const verifyToken = await signOrEncryptTokens();\r\n\r\n  this.verificationToken = verifyToken.hashedToken;\r\n\r\n  return verifyToken.token;\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst Host: IHostModel = mongoose.model<IHostDocument, IHostModel>(\r\n  'Host',\r\n  hostSchema\r\n);\r\nexport default Host;\r\n","import mongoose, { Schema, Document, Model } from 'mongoose';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface IHostPaymentDocument extends Document {\r\n  host: Schema.Types.ObjectId;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface IHostPaymentModel extends Model<IHostPaymentDocument> {}\r\n\r\nconst paymentSchema: Schema = new Schema<IHostPaymentDocument>(\r\n  {\r\n    // relations\r\n    host: {\r\n      type: Schema.Types.ObjectId,\r\n      required: [true, 'Payment should belong to a nurse!'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst HostPayment: IHostPaymentModel = mongoose.model<\r\n  IHostPaymentDocument,\r\n  IHostPaymentModel\r\n>('HostPayment', paymentSchema);\r\nexport default HostPayment;\r\n","export { default as Booking } from './booking.model';\r\nexport { default as Host } from './host.model';\r\nexport { default as Nurse } from './nurse.model';\r\nexport { default as Property } from './property.model';\r\nexport { default as Review } from './review.model';\r\nexport { default as Subscription } from './subscription.model';\r\nexport { default as HostPayment } from './hostPayment.model';\r\nexport { default as NursePayment } from './nursePayment.model';\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  eFavouriteStateToWork,\r\n  eLicenceType,\r\n  eOccupation,\r\n  eSpeciality,\r\n} from '@nursesrent/libs/shared';\r\nimport mongoose, { Schema, Document, Model } from 'mongoose';\r\nimport validator from 'validator';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { signOrEncryptTokens } from '../utils';\r\n\r\nexport interface INurseDocument extends Document {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  displayName: string;\r\n  email: string;\r\n  phone: string;\r\n  dateOfBirth: Date;\r\n  state: string;\r\n  homeTown?: string;\r\n  dreamJob?: string;\r\n  travelWithPet?: boolean;\r\n  about?: string;\r\n  propertyRental?: {\r\n    workExperience?: {\r\n      occupation: eOccupation;\r\n      speciality: eSpeciality;\r\n      favouriteStateToWork: eFavouriteStateToWork;\r\n      certification: string;\r\n      professionalTravelingSince: Date;\r\n      current: Date;\r\n      currentEmployer: string;\r\n    };\r\n    travelingPreferences?: {\r\n      favouriteUnitType: string[];\r\n      transportationMethod: string[];\r\n    };\r\n    reviewAndPreferences?: string;\r\n  };\r\n  favouriteProperties?: {\r\n    myCity?: string;\r\n    topThreeCities?: string[];\r\n  };\r\n  password: string;\r\n  passwordConfirm: string;\r\n  licenceType: eLicenceType;\r\n  licenceNumber: number;\r\n  isVerified?: boolean;\r\n  isActive?: boolean;\r\n  createdAt?: Date;\r\n  disabled?: boolean;\r\n  profilPicture?: string;\r\n  passwordResetToken?: string;\r\n  verificationToken?: string;\r\n  passwordChangetAt?: Date;\r\n  passwordResetExpires?: Date;\r\n  refreshToken?: string;\r\n  reviews?: Schema.Types.ObjectId[];\r\n  bookings?: Schema.Types.ObjectId[];\r\n  payments?: Schema.Types.ObjectId[];\r\n  passwordChangetAfter: (JwtTimestamp: number) => boolean;\r\n  createPasswordResetToken: () => string;\r\n  checkPassword: (\r\n    candidatePassword: string,\r\n    password: string\r\n  ) => Promise<boolean>;\r\n}\r\n\r\nexport interface INurseModel extends Model<INurseDocument> {\r\n  checkPassword: (\r\n    candidatePassword: string,\r\n    password: string\r\n  ) => Promise<boolean>;\r\n}\r\n\r\nconst nurseSchema: Schema = new Schema(\r\n  {\r\n    displayName: {\r\n      type: String,\r\n      required: [true, 'Please enter your first name!'],\r\n      trim: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'An email address is required!'],\r\n      unique: true,\r\n      lowercase: true,\r\n      validate: [validator.isEmail, 'Please eneter a valid email address!'],\r\n    },\r\n    phone: {\r\n      type: String,\r\n      required: [true, 'A phone number is reuired!'],\r\n      validate: [\r\n        validator.isMobilePhone,\r\n        'Please eneter a valid phone number!',\r\n      ],\r\n    },\r\n    dateOfBirth: {\r\n      type: Date,\r\n      required: [true, 'Please specify date of birth!'],\r\n    },\r\n    state: {\r\n      type: String,\r\n      required: [true, 'Please specify the state!'],\r\n    },\r\n    firstName: String,\r\n    lastName: String,\r\n    homeTown: String,\r\n    dreamJob: String,\r\n    travelWithPet: Boolean,\r\n    about: String,\r\n    propertyRental: {\r\n      workExperience: {\r\n        occupation: {\r\n          type: String,\r\n          enum: eOccupation,\r\n        },\r\n        speciality: {\r\n          type: String,\r\n          enum: eSpeciality,\r\n        },\r\n        favouriteStateToWork: {\r\n          type: String,\r\n          enum: eFavouriteStateToWork,\r\n        },\r\n        certification: String,\r\n        professionalTravelingSince: Date,\r\n        current: Date,\r\n        currentEmployer: String,\r\n      },\r\n      travelingPreferences: {\r\n        favouriteUnitType: [String],\r\n        transportationMethod: [String],\r\n      },\r\n      reviewAndPreferences: String,\r\n    },\r\n    favouriteProperties: {\r\n      myCity: String,\r\n      topThreeCities: [String],\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, 'Please enter your password!'],\r\n      minlength: [8, 'Password should be at least 8 characters long!'],\r\n      select: false,\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      required: [true, 'Please confirn your password!'],\r\n      validate: {\r\n        validator: function (passwordConfirm) {\r\n          return passwordConfirm === this.password;\r\n        },\r\n        message: 'Passwords are not the same!',\r\n      },\r\n    },\r\n    licenceType: {\r\n      type: String,\r\n      required: [true, 'Nurse must have a licence type!'],\r\n      enum: eLicenceType,\r\n    },\r\n    licenceNumber: {\r\n      type: Number,\r\n      required: [true, 'Nurse must have a licence number!'],\r\n    },\r\n    isVerified: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    isActive: {\r\n      type: Boolean,\r\n      default: true,\r\n      select: false,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    profilPicture: String,\r\n    passwordResetToken: String,\r\n    verificationToken: String,\r\n    passwordChangetAt: Date,\r\n    passwordResetExpires: Date,\r\n    refreshToken: String,\r\n\r\n    // relations\r\n    reviews: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Review',\r\n      },\r\n    ],\r\n    bookings: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Booking',\r\n      },\r\n    ],\r\n    payments: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'NursePayment',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\n// pre save middlewaree for changing passwordChangetAt field to the date where password is changed\r\nnurseSchema.pre('save', function (next) {\r\n  if (!this.isModified('password') || this.isNew) return next();\r\n\r\n  this.passwordChangetAt = (Date.now() - 1000) as any;\r\n  next();\r\n});\r\n\r\n// pre save middleware for hashing and persisting the hashed password to the database\r\nnurseSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n\r\n  const password = await bcrypt.hash(this.password, 12);\r\n  this.password = password;\r\n  this.passwordConfirm = undefined;\r\n\r\n  next();\r\n});\r\n\r\nnurseSchema.pre('save', async function (next) {\r\n  const randomToken: string = uuidv4();\r\n  const refreshToken = await bcrypt.hash(randomToken, 8);\r\n  this.refreshToken = refreshToken;\r\n\r\n  next();\r\n});\r\n\r\nnurseSchema.methods.checkPassword = async function (\r\n  candidatePassword: string,\r\n  password: string\r\n) {\r\n  return bcrypt.compareSync(candidatePassword, password);\r\n};\r\n\r\nnurseSchema.methods.passwordChangetAfter = function (JwtTimestamp: number) {\r\n  if (this.passwordChangetAt) {\r\n    const changedTimestamp = parseInt(\r\n      (this.passwordChangetAt.getTime() / 1000) as any,\r\n      10\r\n    );\r\n    return JwtTimestamp < changedTimestamp;\r\n  }\r\n  return false;\r\n};\r\n\r\nnurseSchema.methods.createPasswordResetToken = async function () {\r\n  const resetToken = await signOrEncryptTokens();\r\n\r\n  this.passwordResetToken = resetToken.hashedToken;\r\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\r\n\r\n  return resetToken.token;\r\n};\r\n\r\nnurseSchema.methods.createverifyToken = async function () {\r\n  const verifyToken = await signOrEncryptTokens();\r\n\r\n  this.verificationToken = verifyToken.hashedToken;\r\n\r\n  return verifyToken.token;\r\n};\r\n\r\nconst Nurse: INurseModel = mongoose.model<INurseDocument, INurseModel>(\r\n  'Nurse',\r\n  nurseSchema\r\n);\r\nexport default Nurse;\r\n","import mongoose, { Schema, Document, Model } from 'mongoose';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface INursePaymentDocument extends Document {\r\n  nurse: Schema.Types.ObjectId;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface INursePaymentModel extends Model<INursePaymentDocument> {}\r\n\r\nconst paymentSchema: Schema = new Schema<INursePaymentDocument>(\r\n  {\r\n    // relations\r\n    nurse: {\r\n      type: Schema.Types.ObjectId,\r\n      required: [true, 'Payment should belong to a nurse!'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst NursePayment: INursePaymentModel = mongoose.model<\r\n  INursePaymentDocument,\r\n  INursePaymentModel\r\n>('NursePayment', paymentSchema);\r\nexport default NursePayment;\r\n","import {\r\n  ePropertyType,\r\n  eBedroom,\r\n  eBathroom,\r\n  eMinimumDuration,\r\n} from '@nursesrent/libs/shared';\r\nimport mongoose, { Schema } from 'mongoose';\r\nimport validator from 'validator';\r\n\r\n// export interface IPropertyDocument extends Document {\r\n//   title: string;\r\n//   contactInformation: {\r\n//     firstName: string;\r\n//     lastName: string;\r\n//     email: string;\r\n//     phone: string;\r\n//   };\r\n//   propertyType: {\r\n//     type: ePropertyType;\r\n//     units: number;\r\n//     isSubtle?: boolean;\r\n//   };\r\n//   location: Location;\r\n//   details: {\r\n//     bedroom: eBedroom;\r\n//     bathroom: eBathroom;\r\n//     isBathroomPrivate?: boolean;\r\n//     utitlitiesIncluded?: string[];\r\n//   };\r\n//   minimumDuration?: eMinimumDuration;\r\n//   photos: string[];\r\n//   description: string;\r\n//   amenities?: string[];\r\n//   // payment: {},\r\n//   host: Schema.Types.ObjectId;\r\n//   booking?: Schema.Types.ObjectId;\r\n//   reviews?: Schema.Types.ObjectId[];\r\n// }\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n// export interface IPropertyModel extends Model<IPropertyDocument> {}\r\n\r\nconst propertySchema: Schema = new Schema(\r\n  {\r\n    title: {\r\n      type: String,\r\n      required: [true, 'Property must have a title!'],\r\n      trim: true,\r\n    },\r\n    contactInformation: {\r\n      firstName: {\r\n        type: String,\r\n        required: [true, 'Property must have a contact first name!'],\r\n        trim: true,\r\n      },\r\n      lastName: {\r\n        type: String,\r\n        required: [true, 'Property must have a contact last name!'],\r\n        trim: true,\r\n      },\r\n      email: {\r\n        type: String,\r\n        required: [true, 'Property must have a contact email!'],\r\n        lowercase: true,\r\n        validate: [\r\n          validator.isEmail,\r\n          'Property must have a valid contact email!',\r\n        ],\r\n      },\r\n      phone: {\r\n        type: String,\r\n        required: [true, 'Property must have a contact phone number!'],\r\n        validate: [\r\n          validator.isMobilePhone,\r\n          'Property must have a valid contact phone number!',\r\n        ],\r\n      },\r\n    },\r\n    propertyType: {\r\n      type: {\r\n        type: String,\r\n        required: [true, 'Property must have a type!'],\r\n        enum: ePropertyType,\r\n      },\r\n      units: {\r\n        type: Number,\r\n        required: [true, 'Property must have units specified!'],\r\n      },\r\n      isSubtle: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n    },\r\n    location: {\r\n      type: {\r\n        type: String,\r\n        default: 'Point',\r\n        enum: ['Point'],\r\n      },\r\n      coordinates: {\r\n        type: [Number],\r\n        required: [true, 'Property must have location coordinates!'],\r\n      },\r\n      address: {\r\n        type: String,\r\n        required: [true, 'Property must have a location address!'],\r\n      },\r\n      description: {\r\n        type: String,\r\n        required: [true, 'Property must have a location description!'],\r\n      },\r\n    },\r\n    details: {\r\n      bedroom: {\r\n        type: String,\r\n        required: [true, 'Property must have bedrooms informations!'],\r\n        enum: eBedroom,\r\n      },\r\n      bathroom: {\r\n        type: String,\r\n        required: [true, 'Property must have a bathrooms informations!'],\r\n        enum: eBathroom,\r\n      },\r\n      isBathroomPrivate: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n      utitlitiesIncluded: [String],\r\n    },\r\n    minimumDuration: {\r\n      type: Number,\r\n      default: 1,\r\n      enum: eMinimumDuration,\r\n    },\r\n    photos: {\r\n      type: [String],\r\n      required: [true, 'Some property photos are required!'],\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: [true, 'Property must have a description!'],\r\n    },\r\n    amenities: [String],\r\n    // payment: {},\r\n\r\n    // relations\r\n    host: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'Host',\r\n      required: [true, 'A property must be created by a host user!'],\r\n    },\r\n    booking: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'Booking',\r\n    },\r\n    reviews: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Review',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Property = mongoose.model('Property', propertySchema);\r\n// const Property: IPropertyModel = mongoose.model<\r\n//   IPropertyDocument,\r\n//   IPropertyModel\r\n// >('Property', propertySchema);\r\nexport default Property;\r\n","import mongoose, { Model, Schema, Document } from 'mongoose';\r\n\r\nexport interface IReviewDocument extends Document {\r\n  review: string;\r\n  rating: number;\r\n  createdAt?: Date;\r\n  nurse: Schema.Types.ObjectId;\r\n  property: Schema.Types.ObjectId;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface IReviewModel extends Model<IReviewDocument> {}\r\n\r\nconst reviewSchema: Schema = new Schema<IReviewDocument>(\r\n  {\r\n    review: {\r\n      type: String,\r\n      required: [true, 'Review cannot be empty.'],\r\n      trim: true,\r\n    },\r\n    rating: {\r\n      type: Number,\r\n      min: 1,\r\n      max: 5,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n\r\n    // relations\r\n    nurse: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Nurse',\r\n      required: [true, 'Reviw must be from a nurse!'],\r\n    },\r\n    property: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Property',\r\n      required: [true, 'Review must be writed for a property!'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Review: IReviewModel = mongoose.model<IReviewDocument, IReviewModel>(\r\n  'Review',\r\n  reviewSchema\r\n);\r\nexport default Review;\r\n","import mongoose, { Model, Schema, Document } from 'mongoose';\r\n\r\nexport interface ISubscriptionDocument extends Document {\r\n  creditCardNo: string;\r\n  createdAt?: Date;\r\n  lastPayment: number;\r\n  host: Schema.Types.ObjectId;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ISubscriptionModel extends Model<ISubscriptionDocument> {}\r\n\r\nconst subscriptionSchema: Schema = new Schema<ISubscriptionDocument>(\r\n  {\r\n    creditCardNo: {\r\n      type: String,\r\n      required: [true, 'Subscription must have a credit card linked!'],\r\n      trim: true,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    lastPayment: {\r\n      type: Number,\r\n      required: [true, 'A subscription must specify the last payment!'],\r\n    },\r\n\r\n    // relations\r\n    host: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Host',\r\n      required: [true, 'A subscription must be from a host user!'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Subscription: ISubscriptionModel = mongoose.model<\r\n  ISubscriptionDocument,\r\n  ISubscriptionModel\r\n>('Subscription', subscriptionSchema);\r\nexport default Subscription;\r\n","import { Router } from 'express';\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","import { eApiRoutes } from '@nursesrent/libs/shared';\r\nimport { Router } from 'express';\r\nimport {\r\n  hostauth,\r\n  // hostController\r\n} from '../controllers';\r\n\r\nconst router = Router();\r\n\r\n// auth routes\r\nrouter.post(eApiRoutes.SIGNUP, hostauth.signup);\r\nrouter.post(\r\n  eApiRoutes.VERIFYACCOUNT,\r\n  hostauth.protect,\r\n  hostauth.sendVerifyAccountEmail\r\n);\r\nrouter.post(\r\n  `${eApiRoutes.VERIFYACCOUNT}/:token`,\r\n  hostauth.protect,\r\n  hostauth.verify\r\n);\r\nrouter.post(eApiRoutes.SIGNIN, hostauth.signin);\r\nrouter.post(eApiRoutes.REFRESHUSER, hostauth.protect, hostauth.refresh);\r\nrouter.post(eApiRoutes.FORGOTPASSWORD, hostauth.forgotPassword);\r\nrouter.post(`${eApiRoutes.RESETPASSWORD}/:token`, hostauth.resetPassword);\r\nrouter.post(\r\n  eApiRoutes.UPDATEPASSWORD,\r\n  hostauth.protect,\r\n  hostauth.updatepassword\r\n);\r\nrouter.post(eApiRoutes.LOGOUT, hostauth.logOut);\r\n// CRUD\r\n// router\r\n//   .route('/')\r\n//   .get(hostauth.protect, hostController.getAll)\r\n//   .post(hostController.create);\r\n//   .route('/:id')\r\n//   .get(hostauth.protect, hostController.getOne)\r\n//   .patch(hostauth.protect, hostController.updateOne)\r\n//   .delete(hostauth.protect, hostController.deleteOne);\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","export { default as propertyRouter } from './property.routes';\r\nexport { default as hostRouter } from './host.routes';\r\nexport { default as nurseRouter } from './nurse.routes';\r\nexport { default as bookingRouter } from './booking.routes';\r\nexport { default as reviewRouter } from './review.routes';\r\nexport { default as subscriptionRouter } from './subscription.routes';\r\nexport { default as hostPaymentRouter } from './hostPayment.routes';\r\nexport { default as nursePaymentRouter } from './nursePayment.routes';\r\n","import { eApiRoutes } from '@nursesrent/libs/shared';\r\nimport { Router } from 'express';\r\nimport {\r\n  nurseauth,\r\n  // nurseController\r\n} from '../controllers';\r\n\r\nconst router = Router();\r\n\r\n// auth routes\r\nrouter.post(eApiRoutes.SIGNUP, nurseauth.signup);\r\nrouter.post(\r\n  eApiRoutes.VERIFYACCOUNT,\r\n  nurseauth.protect,\r\n  nurseauth.sendVerifyAccountEmail\r\n);\r\nrouter.post(\r\n  `${eApiRoutes.VERIFYACCOUNT}/:token`,\r\n  nurseauth.protect,\r\n  nurseauth.verify\r\n);\r\nrouter.post(eApiRoutes.SIGNIN, nurseauth.signin);\r\nrouter.post(eApiRoutes.REFRESHUSER, nurseauth.protect, nurseauth.refresh);\r\nrouter.post(eApiRoutes.FORGOTPASSWORD, nurseauth.forgotPassword);\r\nrouter.post(`${eApiRoutes.RESETPASSWORD}/:token`, nurseauth.resetPassword);\r\nrouter.post(\r\n  eApiRoutes.UPDATEPASSWORD,\r\n  nurseauth.protect,\r\n  nurseauth.updatepassword\r\n);\r\nrouter.post(eApiRoutes.LOGOUT, nurseauth.logOut);\r\n// CRUD\r\n// router\r\n//   .route('/')\r\n//   .get(nurseauth.protect, hostController.getAll)\r\n//   .post(hostController.create);\r\n//   .route('/:id')\r\n//   .get(nurseauth.protect, hostController.getOne)\r\n//   .patch(nurseauth.protect, hostController.updateOne)\r\n//   .delete(nurseauth.protect, hostController.deleteOne);\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\nimport propertyController from '../controllers/property.controller';\r\n\r\nconst router = Router();\r\n\r\nrouter\r\n  .route('/')\r\n  .get(propertyController.getAll)\r\n  .post(propertyController.create);\r\nrouter\r\n  .route('/:id')\r\n  .get(propertyController.getOne)\r\n  .patch(propertyController.updateOne)\r\n  .delete(propertyController.deleteOne);\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport * as nodemailer from 'nodemailer';\r\nimport { createTransport } from 'nodemailer';\r\nimport * as CONST from '.';\r\nimport { NextFunction } from 'express';\r\nimport { AppError } from '.';\r\nimport { eStatusCode } from '@nursesrent/libs/shared';\r\n\r\nclass Email {\r\n  to: string;\r\n  firstname: string;\r\n  lastname: string;\r\n  url: string;\r\n  from: string;\r\n  isSuccess: boolean;\r\n  next: NextFunction;\r\n  errorMessage: string;\r\n  constructor(\r\n    user: any,\r\n    url: string,\r\n    errorMessage: string,\r\n    next: NextFunction\r\n  ) {\r\n    this.to = user.email;\r\n    this.firstname = user.firstName;\r\n    this.lastname = user.lastName;\r\n    this.url = url;\r\n    this.from = `Nurses rent <${process.env.EMAIL_FROM}>`;\r\n    this.next = next;\r\n    this.isSuccess = false;\r\n    this.errorMessage = errorMessage;\r\n  }\r\n\r\n  transporter() {\r\n    if (process.env.NODE_ENV === CONST.ENV.PROD) {\r\n      return (nodemailer as any).createTransport({\r\n        service: 'SendGrid',\r\n        port: process.env.SENDGRID_PORT,\r\n        auth: {\r\n          user: process.env.SENDGRID_USERNAME,\r\n          pass: process.env.SENDGRID_PASSWORD,\r\n        },\r\n      });\r\n    }\r\n    return createTransport({\r\n      host: process.env.EMAIL_HOST as string,\r\n      port: process.env.EMAIL_PORT as any,\r\n      secure: false,\r\n      auth: {\r\n        user: process.env.EMAIL_USERNAME,\r\n        pass: process.env.EMAIL_PASSWORD,\r\n      },\r\n    });\r\n  }\r\n\r\n  async send(template: string, subject: string) {\r\n    // let html: any;\r\n    // ejs.renderFile(\r\n    //   path.join(__dirname, `../nursesrent-api/src/views/Email/${template}.ejs`),\r\n    //   {\r\n    //     firstname: this.firstname,\r\n    //     lastname: this.lastname,\r\n    //     to: this.to,\r\n    //     from: this.from,\r\n    //     url: this.url,\r\n    //     subject,\r\n    //   },\r\n    //   // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    //   function (err, str) {\r\n    //     if (err) {\r\n    //       // eslint-disable-next-line no-console\r\n    //       console.log(err);\r\n    //       return this.next(\r\n    //         new AppError(\r\n    //           'Can not render the email html',\r\n    //           eStatusCode.INTERNAL_SERVER_ERROR\r\n    //         )\r\n    //       );\r\n    //     }\r\n    //     html = str;\r\n    //   }\r\n    // );\r\n    const html = `<a href=${this.url}>${this.url}</a>`;\r\n    const mailOptions = {\r\n      from: this.from,\r\n      to: this.to,\r\n      subject,\r\n      html,\r\n      // text: (htmlToText as any).fromString(html),\r\n    };\r\n\r\n    await this.transporter()\r\n      .sendMail(mailOptions)\r\n      .then(() => (this.isSuccess = true))\r\n      .catch(() => {\r\n        this.isSuccess = false;\r\n        this.next(\r\n          new AppError(this.errorMessage, eStatusCode.INTERNAL_SERVER_ERROR)\r\n        );\r\n      });\r\n  }\r\n\r\n  // Email types\r\n  async sendWelcome(): Promise<boolean> {\r\n    await this.send('welcomeEmail', `Hello and welcome to Nurses rent!`);\r\n    return this.isSuccess;\r\n  }\r\n\r\n  async sendPasswordReset(): Promise<boolean> {\r\n    await this.send('passwordReset', 'Change your pasword.');\r\n    return this.isSuccess;\r\n  }\r\n\r\n  async sendEmailVerification(): Promise<boolean> {\r\n    await this.send('emailVerification', 'Please verify your email!');\r\n    return this.isSuccess;\r\n  }\r\n}\r\n\r\nexport default Email;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nexport class ApiFeatures {\r\n  query: any;\r\n  queryString: any;\r\n  constructor(query: any, queryString: any) {\r\n    this.query = query;\r\n    this.queryString = queryString;\r\n  }\r\n\r\n  filter() {\r\n    const queryObj = { ...this.queryString };\r\n    const excludedFields = ['page', 'sort', 'limit', 'fields'];\r\n    excludedFields.forEach((el) => delete queryObj[el]);\r\n\r\n    // 1B) Advanced filtering\r\n    let queryStr = JSON.stringify(queryObj);\r\n    queryStr = queryStr.replace(/\\b(gte|gt|lte|lt)\\b/g, (match) => `$${match}`);\r\n\r\n    this.query = this.query.find(JSON.parse(queryStr));\r\n\r\n    return this;\r\n  }\r\n\r\n  sort() {\r\n    if (this.queryString.sort) {\r\n      const sortBy = this.queryString.sort.split(',').join(' ');\r\n      this.query = this.query.sort(sortBy);\r\n    } else {\r\n      this.query = this.query.sort('-createdAt');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  limitFields() {\r\n    if (this.queryString.fields) {\r\n      const fields = this.queryString.fields.split(',').join(' ');\r\n      this.query = this.query.select(fields);\r\n    } else {\r\n      this.query = this.query.select('-__v');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  paginate() {\r\n    const page = this.queryString.page * 1 || 1;\r\n    const limit = this.queryString.limit * 1 || 100;\r\n    const skip = (page - 1) * limit;\r\n\r\n    this.query = this.query.skip(skip).limit(limit);\r\n\r\n    return this;\r\n  }\r\n}\r\n","import * as CONST from '.';\r\nexport class AppError extends Error {\r\n  statusCode: number;\r\n  status: string;\r\n  isOperational: boolean;\r\n  constructor(message: string, statusCode: number) {\r\n    super(message);\r\n\r\n    this.statusCode = statusCode;\r\n    this.status = `${statusCode}`.startsWith('4')\r\n      ? CONST.STATUS.FAIL\r\n      : CONST.STATUS.ERROR;\r\n    this.isOperational = true;\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { ParamsDictionary } from 'express-serve-static-core';\r\nimport { ParsedQs } from 'qs';\r\n\r\nexport const catchAsync =\r\n  (\r\n    fn: (\r\n      arg0: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>,\r\n      arg1: Response<any, Record<string, any>>,\r\n      arg2: NextFunction\r\n    ) => Promise<any>\r\n  ) =>\r\n  (req: Request, res: Response, next: NextFunction) => {\r\n    fn(req, res, next).catch(next);\r\n  };\r\n\r\n// export default catchAsync;\r\n","export const API_ROUTE = '/api/v1';\r\nexport const API_ROUTE2 = '/api/v2';\r\nexport enum ENV {\r\n  DEV = 'development',\r\n  PROD = 'production',\r\n}\r\nexport enum ERRORTYPES {\r\n  CASTERROR = 'CastError',\r\n  VALIDATIONERROR = 'ValidationError',\r\n  DUBLICATEFIELDERROR = 11000,\r\n  JSONWEBTOKENERROR = 'JsonWebTokenError',\r\n  TOKENEXPIREDERROR = 'TokenExpiredError',\r\n}\r\nexport enum STATUS {\r\n  SUCCESS = 'success',\r\n  FAIL = 'fail',\r\n  ERROR = 'error',\r\n}\r\n","export * from './constants';\r\nexport * from './labels';\r\nexport * from './apiFeatures';\r\nexport * from './appError';\r\nexport * from './catchAsync';\r\nexport * from './utilityFunctions';\r\nexport * from './interfaces';\r\nexport { default as Email } from './Email';\r\n","export const NO_DOC_FOUND = 'No document found with that ID';\r\n","import * as jwt from 'jsonwebtoken';\r\nimport * as crypto from 'crypto';\r\nimport * as CONST from '.';\r\nimport { eStatusCode } from '@nursesrent/libs/shared';\r\nimport { NextFunction, Request } from 'express';\r\nimport mongoose from 'mongoose';\r\nimport { AppError, IUrl } from '.';\r\n\r\n/**\r\n *\r\n * @param id\r\n * @param next\r\n * @returns 400 bad request if id its not a mongodb _id\r\n */\r\nexport const checkId = (id: string, next: NextFunction) => {\r\n  if (!mongoose.Types.ObjectId.isValid(id))\r\n    return next(\r\n      new AppError('Please provide a valid id.', eStatusCode.BAD_REQUEST)\r\n    );\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} user the signed user\r\n * @returns the signed JWT token with user id as payload\r\n */\r\nexport const signJWTToken = (user) => {\r\n  const token = jwt.sign(\r\n    { id: user._id, email: user.email },\r\n    process.env.JWT_SECRET_KEY,\r\n    {\r\n      expiresIn: process.env.JWT_TOKEN_EXPIRES_IN,\r\n    }\r\n  );\r\n\r\n  return token;\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} user the signed user\r\n * @param {*} res response generated form the server\r\n * @param {*} stausCode status code (200 or 201) where 200 is the default one\r\n * @returns response with the status code and JWT token\r\n */\r\nexport const sendUserTokenSuccess = (user, res, stausCode = eStatusCode.OK) => {\r\n  const token = signJWTToken(user);\r\n\r\n  const jwtCookieOptions = {\r\n    expires: new Date(\r\n      Date.now() +\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (process.env.JWT_COOKIE_EXPIRES_IN as any) * 24 * 60 * 60 * 1000\r\n    ),\r\n    httpOnly: true,\r\n    sameSite: 'lax',\r\n    secure: false,\r\n  };\r\n  if (process.env.NODE_ENV !== CONST.ENV.PROD) jwtCookieOptions.secure = true;\r\n  res.cookie('jwt', token, jwtCookieOptions);\r\n\r\n  if (!user.isVerified) {\r\n    return res.status(stausCode).json({\r\n      status: CONST.STATUS.SUCCESS,\r\n      token,\r\n      message: 'Please verify your email account!',\r\n    });\r\n  }\r\n\r\n  return res.status(stausCode).json({\r\n    status: CONST.STATUS.SUCCESS,\r\n    token,\r\n  });\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} tokenToHash pass a token if you need to hash it (if no token is passed a token will be generated ranomly)\r\n * @returns an object that contains token and hashed token\r\n */\r\nexport const signOrEncryptTokens = async (tokenToHash?: string) => {\r\n  if (!tokenToHash) {\r\n    const generatedToken = crypto.randomBytes(32).toString('hex');\r\n\r\n    return {\r\n      token: generatedToken,\r\n      hashedToken: crypto\r\n        .createHash('sha256')\r\n        .update(generatedToken)\r\n        .digest('hex'),\r\n    };\r\n  }\r\n  return {\r\n    token: tokenToHash,\r\n    hashedToken: crypto.createHash('sha256').update(tokenToHash).digest('hex'),\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param req\r\n * @returns app url\r\n */\r\nexport const generateUrl = (req: Request): IUrl => {\r\n  return {\r\n    baseFrontUrl: `${req.protocol}://${req.get('host')}`,\r\n    baseApiUrl: `${req.protocol}://${req.get('host')}/api/v1`,\r\n  };\r\n};\r\n","/* eslint-disable @typescript-eslint/no-empty-interface */\r\n// interfaces\r\nexport interface HostDto {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  dlNumber: number;\r\n  expirationDate: Date;\r\n  state: string;\r\n  isVerified?: boolean;\r\n  isActive?: boolean;\r\n  createdAt?: Date;\r\n  disabled?: boolean;\r\n  responseTime?: string;\r\n  numberOfReports?: number;\r\n  responseRate?: string;\r\n  profilPicture?: string;\r\n  subscription?: string[];\r\n  properties?: string[];\r\n}\r\nexport interface CreateHostDto {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  email: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  dlNumber: number;\r\n  expirationDate: Date;\r\n  state: string;\r\n}\r\nexport interface NurseDto {\r\n  personalInfo: {\r\n    firstName?: string;\r\n    lastName?: string;\r\n    displayName: string;\r\n    email: string;\r\n    phone: string;\r\n    dateOfBirth: Date;\r\n    state: string;\r\n    homeTown?: string;\r\n    dreamJob?: string;\r\n    travelWithPet?: boolean;\r\n    about?: string;\r\n  };\r\n  propertyRental?: {\r\n    workExperience?: {\r\n      occupation: eOccupation;\r\n      speciality: eSpeciality;\r\n      favouriteStateToWork: eFavouriteStateToWork;\r\n      certification: string;\r\n      professionalTravelingSince: Date;\r\n      current: Date;\r\n      currentEmployer: string;\r\n    };\r\n    travelingPreferences?: {\r\n      favouriteUnitType: string[];\r\n      transportationMethod: string[];\r\n    };\r\n    reviewAndPreferences?: string;\r\n  };\r\n  favouriteProperties?: {\r\n    myCity?: string;\r\n    topThreeCities?: string[];\r\n  };\r\n  password: string;\r\n  passwordConfirm: string;\r\n  licenceType: eLicenceType;\r\n  licenceNumber: number;\r\n  isVerified?: boolean;\r\n  isActive?: boolean;\r\n  createdAt?: Date;\r\n  disabled?: boolean;\r\n  profilPicture?: string;\r\n  passwordResetToken?: string;\r\n  verificationToken?: string;\r\n  passwordChangetAt?: Date;\r\n  passwordResetExpires?: Date;\r\n  refreshToken?: string;\r\n  reviews?: string[];\r\n  bookings?: string[];\r\n  payments?: string[];\r\n}\r\nexport interface CreateNurseDto {\r\n  displayName: string;\r\n  email: string;\r\n  phone: string;\r\n  dateOfBirth: Date;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  licenceType: eLicenceType;\r\n  licenceNumber: number;\r\n  state: string;\r\n}\r\nexport interface BookingDto {\r\n  price: number;\r\n  createdAt?: Date;\r\n  bookingDuration: number;\r\n  paid?: boolean;\r\n  nurse: string;\r\n  property: string;\r\n}\r\nexport interface CreateBookingDto {}\r\nexport interface PropertyDto {\r\n  title: string;\r\n  contactInformation: {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone: string;\r\n  };\r\n  propertyType: {\r\n    type: ePropertyType;\r\n    units: number;\r\n    isSubtle?: boolean;\r\n  };\r\n  location: {\r\n    type: ['Point'];\r\n    coordinates: string[];\r\n    address: string;\r\n    description: string;\r\n  };\r\n  details: {\r\n    bedroom: eBedroom;\r\n    bathroom: eBathroom;\r\n    isBathroomPrivate?: boolean;\r\n    utitlitiesIncluded?: string[];\r\n  };\r\n  minimumDuration?: eMinimumDuration;\r\n  photos: string[];\r\n  description: string;\r\n  amenities?: string[];\r\n  host: HostDto;\r\n  booking?: string;\r\n  reviews?: string[];\r\n}\r\nexport interface CreatePropertyDto {}\r\nexport interface ReviewDto {\r\n  review: string;\r\n  rating: number;\r\n  createdAt?: Date;\r\n  nurse: NurseDto;\r\n  property: string;\r\n}\r\nexport interface CreatePropertyDto {}\r\nexport interface SubscriptionDto {\r\n  creditCardNo: string;\r\n  createdAt?: Date;\r\n  lastPayment: number;\r\n  host: string;\r\n}\r\nexport interface CreateSubscriptionDto {}\r\nexport interface HostPaymentDto {}\r\nexport interface CreateHostPaymentDto {}\r\nexport interface NursePaymentDto {}\r\nexport interface CreateNursePaymentDto {}\r\n\r\n//enums\r\nexport enum eApiRoutes {\r\n  BASE = '/api/v1',\r\n  PROPERTIES = 'properties',\r\n  NURSE = 'nurses',\r\n  HOST = 'hosts',\r\n  SIGNUP = '/signup',\r\n  VERIFYACCOUNT = '/sendverificationtoken',\r\n  SIGNIN = '/signin',\r\n  REFRESHUSER = '/refreshuser',\r\n  FORGOTPASSWORD = '/forgotpassword',\r\n  RESETPASSWORD = '/resetpassword',\r\n  UPDATEPASSWORD = '/updatepassword',\r\n  LOGOUT = '/logout',\r\n  DISABLEME = '/disbleme',\r\n  DISABLEACCOUNT = '/disableuser',\r\n  UPDATEUSER = '/updateuser',\r\n  UPDATEME = '/updateme',\r\n  GETME = '/me',\r\n  GETUSER = '/getuser',\r\n}\r\nexport enum eHttpMethod {\r\n  GET = 'get',\r\n  POST = 'post',\r\n  PUT = 'put',\r\n  PATCH = 'patch',\r\n  DELETE = 'delete',\r\n}\r\nexport enum eStatusCode {\r\n  OK = 200,\r\n  CREATED = 201,\r\n  ACCEPTED = 202,\r\n  NO_CONTENT = 204,\r\n  BAD_REQUEST = 400,\r\n  UNAUTHORIZED = 401,\r\n  FORBIDDEN = 403,\r\n  NOT_FOUND = 404,\r\n  METHOD_NOT_ALLOWED = 405,\r\n  CONFLICT = 409,\r\n  INTERNAL_SERVER_ERROR = 500,\r\n  BAD_GATEWAY = 502,\r\n  SERVICE_UNAVAILABLE = 503,\r\n  GATEWAY_TIMEOUT = 504,\r\n}\r\nexport enum eRoomType {\r\n  ENTIRE_UNIT = 'Entire unit',\r\n  PRIVATE_ROOM = 'Room',\r\n  HOTEL = 'Hotel',\r\n  GROUP_RENTAL = 'Group Rental',\r\n  PETS_WELCOME = 'Pets welcome',\r\n}\r\nexport enum eLicenceType {\r\n  TYPE1 = 'type1',\r\n}\r\nexport enum eMinimumDuration {}\r\nexport enum eBathroom {}\r\nexport enum eBedroom {}\r\nexport enum ePropertyType {}\r\nexport enum eOccupation {}\r\nexport enum eSpeciality {}\r\nexport enum eFavouriteStateToWork {}\r\nexport enum eFavouriteUnitType {}\r\nexport enum eTransportationMethod {}\r\n","module.exports = require(\"bcryptjs\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"express-rate-limit\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"nodemailer\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"validator\");","module.exports = require(\"xss-clean\");","module.exports = require(\"crypto\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable @typescript-eslint/no-var-requires */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nrequire('dotenv').config();\r\nimport mongoose, { ConnectOptions } from 'mongoose';\r\nimport app from './app';\r\n\r\nprocess.on('uncaughtException', (err) => {\r\n  console.log(\r\n    'Uncaught Exception! >>>>> Shooting down...',\r\n    '\\n',\r\n    err.name,\r\n    '-',\r\n    err.message\r\n  );\r\n  process.exit(1);\r\n});\r\n\r\n// connect to dhe mongodb db\r\nconst DB = process.env.MONGO_CONECTION_STRING.replace(\r\n  '<PASSWORD>',\r\n  process.env.MONGO_PASSWORD\r\n);\r\n\r\nconst options: ConnectOptions = {\r\n  autoIndex: true,\r\n  maxPoolSize: 10,\r\n  serverSelectionTimeoutMS: 5000,\r\n  socketTimeoutMS: 45000,\r\n  family: 4,\r\n};\r\n\r\nmongoose.set('strictQuery', true);\r\nmongoose\r\n  .connect(DB, options)\r\n  .then((con) => {\r\n    console.log('connected to the db');\r\n  })\r\n  .catch((err) => console.error(err.name, '-', err.message, '\\n', err));\r\n\r\nconst PORT = process.env.PORT || 3333;\r\nconst server = app.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}...`);\r\n});\r\n\r\nprocess.on('unhandledRejection', (err: any) => {\r\n  console.log(\r\n    'Unhandled Rejection! >>>>> Shooting down...',\r\n    '\\n',\r\n    err.name,\r\n    '-',\r\n    err.message\r\n  );\r\n  server.close(() => {\r\n    // 0 stands for success, 1 stands for unhandled rejection\r\n    process.exit(1);\r\n  });\r\n});\r\n"],"names":["app","express","limiter","max","windowMs","message","use","CONST","ENV","DEV","logger","static","path","join","__dirname","cors","origin","credentials","API_ROUTE","json","cookieParser","mongoSanitize","xss","hpp","get","req","res","status","eStatusCode","OK","STATUS","SUCCESS","eApiRoutes","BASE","data","PROPERTIES","propertyRouter","HOST","hostRouter","NURSE","nurseRouter","all","next","AppError","originalUrl","NOT_FOUND","globalErrorHandler","create","handlerFactory","createOne","getAll","getOne","updateOne","deleteOne","err","statusCode","INTERNAL_SERVER_ERROR","ERROR","error","startsWith","stack","console","render","title","msg","sendErrorDev","PROD","name","ERRORTYPES","CASTERROR","value","BAD_REQUEST","handleCastErrorDB","code","DUBLICATEFIELDERROR","match","CONFLICT","handleDuplicateFieldsDB","VALIDATIONERROR","Object","values","errors","map","el","handleValidationErrorDB","JSONWEBTOKENERROR","UNAUTHORIZED","TOKENEXPIREDERROR","isOperational","sendErrorProd","Model","catchAsync","features","ApiFeatures","find","query","filter","sort","limitFields","paginate","doc","results","length","popOptions","id","params","checkId","findById","populate","LABELS","NO_DOC_FOUND","body","CREATED","findByIdAndUpdate","new","runValidators","findByIdAndDelete","NO_CONTENT","signup","firstName","lastName","phone","email","password","passwordConfirm","dlNumber","expirationDate","state","userData","createdUser","Host","save","isSuccess","Email","generateUrl","baseFrontUrl","sendWelcome","sendUserTokenSuccess","sendVerifyAccountEmail","user","isverified","verificationToken","createverifyToken","baseUrl","sendEmailVerification","validateBeforeSave","verify","token","encryptedToken","signOrEncryptTokens","host","findOne","hashedToken","isVerified","undefined","signin","select","schema","methods","checkPassword","protect","headers","authorization","split","cookies","jwt","decodedToken","promisify","process","env","JWT_SECRET_KEY","freshHost","passwordChangetAfter","iat","forgotPassword","passwordResetToken","createPasswordResetToken","sendPasswordReset","passwordResetExpires","resetPassword","$gt","Date","now","updatepassword","refresh","refreshToken","hostauth","logOut","_req","cookie","expires","httpOnly","default","NursePayment","displayName","dateOfBirth","licenceNumber","licenceType","Nurse","nurse","freshNurse","nurseauth","Property","Review","bookingSchema","Schema","price","type","Number","require","createdAt","bookingDuration","required","paid","Boolean","Types","ObjectId","ref","property","toJSON","virtuals","toObject","Booking","model","hostSchema","String","trim","unique","lowercase","validate","isEmail","isMobilePhone","minlength","validator","this","isActive","disabled","responseTime","numberOfReports","responseRate","profilPicture","passwordChangetAt","subscription","properties","payments","pre","isModified","isNew","bcrypt","hash","candidatePassword","compareSync","JwtTimestamp","parseInt","getTime","resetToken","verifyToken","paymentSchema","HostPayment","nurseSchema","homeTown","dreamJob","travelWithPet","about","propertyRental","workExperience","occupation","enum","eOccupation","speciality","eSpeciality","favouriteStateToWork","eFavouriteStateToWork","certification","professionalTravelingSince","current","currentEmployer","travelingPreferences","favouriteUnitType","transportationMethod","reviewAndPreferences","favouriteProperties","myCity","topThreeCities","eLicenceType","reviews","bookings","randomToken","propertySchema","contactInformation","propertyType","ePropertyType","units","isSubtle","location","coordinates","address","description","details","bedroom","eBedroom","bathroom","eBathroom","isBathroomPrivate","utitlitiesIncluded","minimumDuration","eMinimumDuration","photos","amenities","booking","reviewSchema","review","rating","min","subscriptionSchema","creditCardNo","lastPayment","Subscription","router","Router","post","SIGNUP","VERIFYACCOUNT","SIGNIN","REFRESHUSER","FORGOTPASSWORD","RESETPASSWORD","UPDATEPASSWORD","LOGOUT","route","patch","delete","constructor","url","errorMessage","to","firstname","lastname","from","EMAIL_FROM","transporter","nodemailer","createTransport","service","port","SENDGRID_PORT","auth","SENDGRID_USERNAME","pass","SENDGRID_PASSWORD","EMAIL_HOST","EMAIL_PORT","secure","EMAIL_USERNAME","EMAIL_PASSWORD","send","template","subject","html","mailOptions","sendMail","then","catch","queryString","queryObj","forEach","queryStr","JSON","stringify","replace","parse","sortBy","fields","page","limit","skip","Error","super","FAIL","captureStackTrace","fn","API_ROUTE2","isValid","signJWTToken","sign","_id","expiresIn","JWT_TOKEN_EXPIRES_IN","stausCode","jwtCookieOptions","JWT_COOKIE_EXPIRES_IN","sameSite","tokenToHash","generatedToken","crypto","randomBytes","toString","createHash","update","digest","protocol","baseApiUrl","eHttpMethod","eRoomType","eFavouriteUnitType","eTransportationMethod","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","on","log","exit","DB","MONGO_CONECTION_STRING","MONGO_PASSWORD","set","connect","autoIndex","maxPoolSize","serverSelectionTimeoutMS","socketTimeoutMS","family","con","PORT","server","listen","close"],"sourceRoot":""}